//-Created by Juha on 3/7/2016.
extends broaden
block levenee
    h3 Spectrum calculator for inhomogeneous broadening
    |   Calculated spectra are obtained using equation (2) on the
    -equation2="/inhomo"
    a(href="#{equation2}")     Inhomogeneous details
    |    page. (It was also used to evaluate the broken line curves on that page.)

    div(id="content")
      //this contains the playground for the simulation graph
      div(class="demo-container")
        div(id="ph1_inhomog" class="demo-placeholder")
          //-p With multiple axes, you sometimes need to interact with them. A simple way to do this
          //-|  is to draw the plot, deduce the axis placements and insert a couple of divs on top to
          //-|  catch events.
          //-p Try clicking an axis.
        //-p(id="clicked")
    div(id="footer" style="paddig-left:50px")
        Copyright &copy; 2007 - 2014 IOLA and Ole Laursen

    h3 Spectrum calculator for homogeneous broadening
    |   Calculated spectra are obtained using equation (x) on the
    -equation3="/homo"
    a(href="#{equation3}")     Homogeneous details
    |    page.

    div(id="content2")
      //this contains the playground for the simulation graph
      div(class="demo-container")
        div(id="ph2_homog" class="demo-placeholder")

    div(id="settnDial" title="Graphing details")
      //- x-axis: spectral range settings
      fieldset(id='spRange' style='display:none')
        b(style='font-size:16px') Spectral range [eV's]:
        br
        br
        label(for="eVStart") Starts at:
        input(id="eVStart" name="eVStart" class='inputti')
        label(for="eVStop") Stops at:
        input(id="eVStop" name="eVStop" class='inputti')
        button(id='rangeok' style="margin:0px 15px") OK

      //-Boltzmann distribution for energy occupancy:
      fieldset(id='eg_et' style='display:none')
        b(style='font-size:16px') Energy state occupancy: \(f_{cv}=f_{c}(\epsilon)\times(1-f_{v}(\epsilon))\)
        |   is approximated
        br
        | with Bolzmann distribution: \(f_{B}=exp(-\epsilon/k_{B}T)\), where \(\epsilon > E_{t}\)
        br
        b Minimum transition energy [eV]
        i   (for bulk materials \(E_{t}=E_{g}\) )
        br
        br
        label(for="eV_Et" id='etLbl') Et:
        input(id="eV_Et" class='inputti')
        label(for="temp") Temp [K]:
        input(id="temp" class='inputti')
        button(id='evetok' style="margin:0px 15px") OK

      //- Joint density of states:
      fieldset(id='spJdos' style='display:none')
        b(style='font-size:16px') Joint density of states (JDOS):
        br
        input(type="radio" id="bulkJDOS" name="jdos" value="bulk" style="margin-left:5px")
        |   Bulk-JDOS
        i   (\(\rho_{r}\propto Sqrt(E)\))
        br
        input(type="radio" id="qwJDOS" name="jdos" value="qw" style="margin-left:5px")
        |   QW-JDOS
        i   (Heaviside step function)
        button(id='jdosok' style="margin:0px 35px") OK

      //-Exciton enhancement:
      fieldset(id="exEnha" style='display:none')
        b(id='bulklege' class='otsikko') Bulk matrl. exciton enhancement
        i(id='bulk_i' style='display:none')   ( 3D-exciton model )
        b(id='qwlege' class='otsikko') QW exciton enhancement
        i(id='qw_i' style='display:none')   ( 2D-exciton model )
        //-br
        //-p(id='bulklege' style='display:none')   For bulk materials (3D-excitons)
        //p(id='qwlege' style='display:none')     For qw-materials (2D-excitons)
        br
        div(id='qwendetls')
          div(style='font-size:16px')
            b Viewing direction:
              //-&nbsp; &nbsp; &nbsp;
              //-| Polarization:
            b(style='padding-left:60px') Polarization:
          div(id='qwenhas')
            label(for="dirPar") On qw plane:
            input(type="radio" id="dirPar" name="dirBut" value="parallel" checked="checked" style="margin-right:7px")
            label(for="enhTE") TE:
            input(type="radio" id="enhTE" name="enhBut" value="TE" checked="checked" style="margin-right:7px")
            //-| TE-polarization
            br
            label(for="dirPerp") On qw normal:
            input(type="radio" id="dirPerp" name="dirBut" value="perpend" style="margin-right:7px")
            label(for="enhTM") TM:
            input(type="radio" id="enhTM" name="enhBut" value="TM" style="margin-right:7px")
        br
        //- b(id='exBndLbl' class='boldsFrmt') Exciton binding energy [meV]:
        label(for="eV_Bind" class='label2') Binding energy [meV]:
        input(id="eV_Bind" name="eV_Bind" class='inputti')
        button(id='exenhaok' style="margin:0px 100px") OK

      fieldset(id='spUrbach' style='display:none')
        b(style='font-size:16px') Urbach tail
        //-i       (\(L_{ih}=exp[(E - E_{f})/E_{u}],\quad (E\leq E_{u})\))
        br
        i Inhomogeneous broadening function
        br
        i (plotted in convolution integral, unless selected alone below)
        br
        | \(E_{f}=E_{t}\quad\)
        | i (to set \(E_{f}\), apply the energy state occupancy option)
        br
        br
        label(for="eveu") Eu [meV]:
        input(id="eveu" class="inputti")
        button(id='urbachok' style="margin:0px 15px") OK

      fieldset(id='spWhat' style='display:none')
        b(style='font-size:16px') Plotting selector:
        i(style='float:right')    (click titles to edit their parameters)
        br
        //-legend(style="font-size:100%") Plotting selector
        input(id="pltEpsilon" style='margin-left:7px' type="checkbox" value='No')
        //-p(style='padding-left:30px') Photon energy: \(\epsilon\)
        a(href="javascript:void(0);", id="hrefEpsilon", style='padding-left:30px')
          | Photon energy: \(\epsilon\)
        br
        input(id="pltJdos" style='margin-left:7px' type="checkbox" value='No')
        a(href="javascript:void(0);", id="hrefJdos", style='padding-left:30px')
          | Joint Density of States:  \(\rho_{r}\)  (Select bulk or QW model)
        br
        input(id="pltSommerf" style='margin-left:7px' type="checkbox" value='No')
        a(href="javascript:void(0);", id="hrefSommerf", style='padding-left:30px')
          | Sommerfeldt enhancement: \(S(\epsilon)\)
        br
        input(id="pltFcv" style='margin-left:7px' type="checkbox" value='No')
        a(href="javascript:void(0);", id="hrefExcito", style='padding-left:30px')
          | Transition energy, \(E_{t}\), and temp.dep. in energy state occupancy
          br
        input(id="pltUrbach" style='margin-left:7px' type="checkbox" value='No')
        a(href="javascript:void(0);", id="hrefUrbach", style='padding-left:30px')
          | Asym. Urbach:  \(L_{ih}(\epsilon)=\frac{1}{2}(1-sgn(E_{f}-\epsilon))\cdot\exp[-(E_{f}-\epsilon)/E_{u}]\)
          br
        input(id="pltsUrbach" style='margin-left:7px' type="checkbox" value='No')
        //-hidden input for file name to open local file using HTML5 file API
        input(type="file" id="emisLocFiles" style="display:none" name="emisLocFiles")
        a(href="javascript:void(0);", id="hrefsUrbach", style='padding-left:30px')
          |  Symm. Urbach:  \(L_{ih}(\epsilon)=\exp[-|E_{f}-\epsilon|/E_{u}]\)
          br
          //- input(id="normalized" style='margin-left:7px' type="checkbox" value='No')
          //  | Normalize to unity maximum
        br
        button(id='whatok' style="margin:0px 5px") OK
        i(style="float:right")   (in graph legend asterix '*' stands for convolution)
      br
      button(id='openFile' style="margin:0px 5px") Open file
      button(id='saveFile' style="display:none") Save file
    include mongoDialForm.jade
    //indenting of previous include has to correct


    script(type='text/javascript').
      var userName = 'No login';   // after login obtained from web-server
      var dirUser='Publ';          //default (i.e. No Login) username for server directory
      var kBoltz = 1.38064852E-23; //Boltzmann constant
      var eCha = 1.60217662E-19;   //electron charge
      var hBar = 1.05457180E-34;   //reduced Planck constant hbar
      var calcSpectr= new Object();
      calcSpectr.numPoints=101;
      calcSpectr.inPlot={e:true,jdos:false,Se:false,fcv:false,
          Lih:false,Lsih:false,convo:false};
      calcSpectr.eVstart=1.3;      //start energy for plotting
      calcSpectr.eVstop=1.7;       //stop energy for plotting
      calcSpectr.eTr=1.4;          //Transition energy
      calcSpectr.eVarr=[];         //photon energy array (x-axis points)
      calcSpectr.jdosArr=[];       //jdos
      calcSpectr.jdostype="qw";    //bulk or qw: parabolic or Heaviside step function
      calcSpectr.exenArr=[];       //exciton enhancement array
      calcSpectr.viewDir='parallel';
      calcSpectr.polarizat='TE';
      calcSpectr.exEb=5;           //exciton binding energy meV
      //calcSpectr.exenh={include:false,exiten:'5',viewdir:'parallel',polarisat:'TM'};
      calcSpectr.fcvArr=[];        //boltzmann function
      calcSpectr.Lih=[];           //urbach array
      calcSpectr.SymLih=[];        //Symmetric urbach array
      calcSpectr.plotArr=[];       //plotted array
      calcSpectr.legend='';        //legend for graph
      calcSpectr.kelvin=293;       //kelvin temperature
      calcSpectr.eU=8;             //Urbach energy meV
      calcSpectr.linlog='lin';     //linear or logarithmic
      // Other initial values *******************************************:
      // ****************************************************************
      var experArr=[];
      var filNam='';               //filename for experimental spectrum
      makespArr();  //creates spectral points array and stores to calcSpectr.eVarr
      var optiot = {//initial plotting options
          xaxes: [{position: 'bottom', axisLabel: 'Energy eV'}],
          yaxes: [{position: 'left', axisLabel: 'Relative Intensity'}],
          legend: {position: "ne"},
          grid: {//This one set can be hovered:
              margin: {
                  top: 35
              },
              hoverable: 'Relative Intensity'
          },
          canvas: true
      };

      //Build dialog form for opening and saving files
      buildMongoDial();
      var srvrFileTxt = 'Open emission spectrum';
      var DFmngo = $('#mongoDialForm'); //dialog form
      DFmngo.dialog('option', 'title', srvrFileTxt);  // starts from LED collection

      var plot = $.plot("#ph1_inhomog", [], optiot); //var plot = $.plot("#ph1_inhomog", dataa, optiot);

      var dataa = [//initializes data for graph plotting
          {//only one x,y and axis pair
              data: LinOrLog(),
              xaxis: 1, yaxis: 1, label: calcSpectr.legend
          }
      ];

      /*if (window.sessionStorage.getItem('RTFtoken') && window.sessionStorage.getItem('RTFtoken').length > 0) {
          userName = window.sessionStorage.getItem('RTFuser');
      } else {
          userName = 'No login';
          dirUser = 'Publ';
          var fiile = 'Defaults/R-Default';
          mongoGetOne(fiile, dirUser);// opens default stack from Publ dierectory
      }*/

      function drawCanvas() {
          var graphTitle=(calcSpectr.jdostype=='qw')? 'with QW-model':'with bulk model';
          graphTitle=filNam+' '+graphTitle;
          var canvas = plot.getCanvas();
          var context = canvas.getContext('2d');
          context.lineWidth = 2;
          context.strokeStyle = "rgba(35, 70, 237, .8)";
          context.font = "14pt sans-serif";
          //context.fillText("Fill, Stroke Text, 12pt, sans-serif", 80, 30);
          context.strokeText(graphTitle, 10, 0);
      }

      function setQwRadio(){
          if (calcSpectr.viewDir == 'parallel'){
            $('#dirPar').prop('checked',true);
            $('#dirPerp').prop('checked',false);
          }else{
            $('#dirPar').prop('checked',false);
            $('#dirPerp').prop('checked',true);
          }
          if (calcSpectr.polarizat == 'TE') {
              $('#enhTE').prop('checked',true);
              $('#enhTM').prop('checked',false);
          }else{
              $('#enhTE').prop('checked',false);
              $('#enhTM').prop('checked',true);
          }
      }

      function setJdosRadio(){
          if (calcSpectr.jdostype == "bulk") {
              $('#bulkJDOS').prop("checked", true);
              $('#bulklege').css('display','inline');
              $('#bulk_i').css('display','inline');
              $('#qwlege').css('display','none');
              $('#qw_i').css('display','none');
              $('#qwendetls').css('display','none');
          } else {
              $('#qwJDOS').prop("checked", true);
              $('#bulklege').css('display','none');
              $('#bulk_i').css('display','none');
              $('#qwlege').css('display','inline');
              $('#qw_i').css('display','inline');
              $('#qwendetls').css('display','inline');
          }
      }

      makeJdos();       //density of states
      makeBoltz();      //creates Boltzmann distribution
      makeLih();        //Urbach distribution
      makeSymLih();
      setChkboxes();    //updates checkbox status
      setLegend();      //makes plotting legend
      makeSommer();     //exciton enhanchements

      $("#settnDial").dialog({
        width:700,
        autoOpen: false,
        show: {
          effect: "blind",
          duration: 500
        },
        hide: {
          effect: "explode",
          duration: 500
        }
      });
      //$("#settnDial").dialog('option','title','Graphing options');

      $('#openFile').click(function(){
        $('#settnDial').dialog('close');
        DFmngo
          .css('display', 'inline')
          .dialog('option', 'title', srvrFileTxt)  // PL/EL emission spectrum db collection
          .dialog('open');
      });

      $('#saveFile').click(function () {
        $('#settnDial').dialog('close');
          var srvrFileTxt = 'Save emission spectrum';
          DFmngo
            .css('display', 'inline')
            .dialog('option', 'title', srvrFileTxt)  // PL/EL emission spectrum db collection
            .dialog('open');
      });

      $('#ph1_inhomog').dblclick(function(){
          $('#spWhat').css('display','block');
          $( "#settnDial" ).dialog( "open" );
          if (experArr.length>0){
              $('#saveFile').css('display','inline');
              //var srvrFileTxt = 'Save emission spectrum';
              //var DFmngo = $('#mongoDialForm'); //dialog form
              //DFmngo.dialog('option', 'title', srvrFileTxt);  // starts from LED collection
          }
          else{
              $('#saveFile').css('display','none');
          }
          setJdosRadio();
          setQwRadio();
      });

      $("#eVStart").spinner({
          max: calcSpectr.eVstop-0.01,
          min: 0,
          step: 0.001,
          spin: function (event, ui) {
              //this.value; antaisi olleen arvon
              //ui.value antaisi tulevan uuden arvon
              //var tmp1 = ui.value.toFixed(3)+0.01;
          },
          change: function (event, ui) {
              var tmp1 = Number(this.value)+0.01;
              tmp1 = tmp1.toFixed(3);
              $("#eVStop").spinner('option','min',tmp1);
          }
      }).val(calcSpectr.eVstart);

      $("#eVStop").spinner({
          max: 2.5,
          min: calcSpectr.eVstart+0.1,
          step: 0.001,
          spin: function (event, ui) {
              //this.value; antaisi olleen arvon
              //ui.value antaisi tulevan uuden arvon
              //var tmp1 = ui.value.toFixed(3)-0.01;
          },
          change: function (event, ui) {
              var tmp1 = Number(this.value)-0.01;
              tmp1=tmp1.toFixed(3);
              $("#eVStart").spinner('option','max',tmp1);
          }
      }).val(calcSpectr.eVstop);

      $("#eV_Et").spinner({
          max: 2.5,
          min: 0,
          step: 0.001,
          spin: function (event, ui) {
              //this.value; antaisi olleen arvon
              //ui.value antaisi tulevan uuden arvon
              var tmp = ui.value.toFixed(3);
              calcSpectr.eTr = tmp;
              makeJdos();       //density of states
              makeBoltz();      //Boltzmann distribution
              makeLih();        //asym Urbach distribution
              makeSymLih();     //symmetric Urbach
              makeSommer();     //exciton enhanchements
              calcPlotted();
          },
          change: function (event, ui) {
              var tmp1 = Number(this.value);
              tmp1 = tmp1.toFixed(3);
              calcSpectr.eTr=tmp1;
              makeJdos();       //density of states
              makeBoltz();      //creates Boltzmann distribution
              makeLih();        //Urbach distribution
              makeSymLih();
              makeSommer();     //exciton enhanchements
              calcPlotted();
              //inhombr();
              //makespArr();
          }
      }).val(calcSpectr.eTr);

      $("#eV_Bind").spinner({
          max: 20,
          min: 0,
          step: 0.01,
          spin: function (event, ui) {
              //this.value; antaisi olleen arvon
              //ui.value antaisi tulevan uuden arvon
              var tmp = ui.value.toFixed(3);
              calcSpectr.exEb = tmp;
              makeSommer();     //exciton enhanchements
              calcPlotted();
          },
          change: function (event, ui) {
              var tmp1 = Number(this.value);
              tmp1 = tmp1.toFixed(3);
              calcSpectr.exEb = tmp1;
              makeSommer();     //exciton enhanchements
              calcPlotted();
          }
      }).val(calcSpectr.exEb);

      $("#temp").spinner({
          max: 600,
          min: 0,
          step: 1,
          spin: function (event, ui) {
              //this.value; antaisi olleen arvon
              //ui.value antaisi tulevan uuden arvon
              var tmp = ui.value.toFixed(0);
              calcSpectr.kelvin = tmp;
              makeBoltz();      //creates Boltzmann distribution
              calcPlotted();
          },
          change: function (event, ui) {
              var tmp1 = Number(this.value);
              tmp1 = tmp1.toFixed(3);
              calcSpectr.kelvin = tmp1;
              makeBoltz();      //creates Boltzmann distribution
              calcPlotted();
              //makespArr();
          }
      }).val(calcSpectr.kelvin);

      $("#eveu").spinner({
          max: 20,
          min: 0,
          step: 0.1,
          spin: function (event, ui) {
              //this.value; antaisi olleen arvon
              //ui.value antaisi tulevan uuden arvon
              var tmp = ui.value.toFixed(3);
              calcSpectr.eU = tmp;
              makeLih();        //Urbach distribution
              makeSymLih();
              calcPlotted();
          },
          change: function (event, ui) {
              var tmp1 = Number(this.value);
              tmp1 = tmp1.toFixed(3);
              calcSpectr.eU = tmp1;
              makeLih();        //Urbach distribution
              makeSymLih();
              calcPlotted();
          }
      }).val(calcSpectr.eU);

      setJdosRadio();
      setQwRadio();

      /*$("#exEnch").change(function(){
        if (this.checked) {
          $("#eV_Bind").show();
          $("#exBndLbl").show();
          if ($('input[name=jdos]:checked').val()=='qw'){
            $('#qwendetls').show();
            setQwRadio();
          }else{
            $('#qwendetls').hide();
          }
        }else{
          $("#eV_Bind").hide();
          $("#exBndLbl").hide();
          $("#qwendetls").hide();
        }
      });*/

      $('input[type=radio][name=jdos]').change(function () {
        if (this.value == 'bulk') {
          calcSpectr.jdostype='bulk';
          $("#qwendetls").css('display','none');
        } else if (this.value == 'qw') {
          calcSpectr.jdostype='qw';
          $("#qwendetls").css('display','block');
        }
          setJdosRadio();
          makeJdos();       //density of states
          makeSommer();
          calcPlotted();
      });

      $('input[type=radio][name=dirBut]').change(function () {
          if (this.value == 'parallel') {
            $('#enhTE').attr('disabled',false);
            $('#enhTM').attr('disabled',false);
            calcSpectr.viewDir='parallel';
          }
          else if (this.value == 'perpend') {
            $('#enhTE').prop('checked',true);
            $('#enhTM').prop('checked',false);
            $('#enhTE').attr('disabled',true);
            $('#enhTM').attr('disabled',true);
            calcSpectr.viewDir='perpend';
          }
          calcPlotted();
          //inhombr();
      });

      $('input[type=radio][name=enhBut]').change(function () {
          if (this.value == 'TE') {
              calcSpectr.polarizat = 'TE';
          }
          else if (this.value == 'TM') {
              calcSpectr.polarizat = 'TM';
          }
          calcPlotted();
          //inhombr();
      });

      /**
       * Function for graphing inhomog broadening
       * @function
       * @param {Array} PloArr - contains the numeric data to be plotted
       * @param {Number} graphNO - flot-graph placeholder number according to tabs-no
       */
      function inhombr() {
        var opts = plot.getOptions(); // get a reference to the options
        if (calcSpectr.plotArr.length<calcSpectr.numPoints) {
            alert('no data for plotting!');
            return; //exit plotting if no data
        }
        if (calcSpectr.linlog=='log') {
          opts.yaxes[0].axisLabel='Log10  Intensity';
        }else{
          opts.yaxes[0].axisLabel='Rel. Intensity';
        }
        var newData = [
          {data: LinOrLog(), xaxis: 1, yaxis: 1, label: calcSpectr.legend},
          {data: LinOrLogExp(), xaxis: 1, yaxis: 1, label: 'Measured'}
        ];
        plot.setData(newData);
        plot.setupGrid();
        plot.draw();
        var graphTitle = (calcSpectr.jdostype == 'qw') ? 'with qw-model' : 'with bulk model';
        graphTitle=filNam+' '+graphTitle;
        var canvas = plot.getCanvas();
        var context = canvas.getContext('2d');
        context.lineWidth = 2;
        context.strokeStyle = "rgba(35, 70, 237, .8)";
        context.font = "14pt sans-serif";
        //context.fillText("Fill, Stroke Text, 12pt, sans-serif", 80, 30);
        context.strokeText(graphTitle, 20, 15);
      }

      function makespArr(){
          var Start = parseFloat(calcSpectr.eVstart);//does not work without parseFloats
          var Stop = parseFloat(calcSpectr.eVstop);
          var n = parseInt(calcSpectr.numPoints);
          var Del = (Stop - Start) / (n - 1);
          var helppi;
          calcSpectr.eVarr=[];
          for (var i = 0; i < n; i++) {
              helppi = (Start + i * Del).toFixed(7);
              calcSpectr.eVarr.push(helppi);
          }
      }

      function makeSommer(){
          //does not work without parseFloats
          var n = parseInt(calcSpectr.numPoints);
          var Etr=parseFloat(calcSpectr.eTr);
          var Eb=parseFloat(calcSpectr.exEb);
          var eVs;
          calcSpectr.exenArr=[];
          for (var i = 0; i < n; i++) {
              eVs = parseFloat(calcSpectr.eVarr[i]);
              calcSpectr.exenArr.push(Sommerf(eVs,Etr,Eb));
          }
      }

      function Sommerf(E,Etr,Eb) {
          var Pi_alfa;
          var Se=0;
          if (E > Etr) {
              Pi_alfa = Math.PI * Math.sqrt(Eb / 1000 / (E - Etr));
              if (calcSpectr.jdostype == 'bulk') {
                  Se = 2 * Pi_alfa * Math.exp(Pi_alfa) / (Math.exp(Pi_alfa) -
                          Math.exp(-Pi_alfa));
              } else{ // jdostype = qw
                  Se = 2 * Math.exp(Pi_alfa) / (Math.exp(Pi_alfa) +
                          Math.exp(-Pi_alfa));
                  if ((calcSpectr.viewDir == 'parallel') && (calcSpectr.polarizat == 'TM')) {
                      Se *=(1 + 4 * Eb/(E - Etr)/1000);
                  }
              }
          }
          return Se.toFixed(7);
      }

      function makeBoltz(){
          var Etr = parseFloat(calcSpectr.eTr);
          var Temp = parseFloat(calcSpectr.kelvin);
          var n=parseInt(calcSpectr.numPoints);
          var eVs;
          calcSpectr.fcvArr=[];
          for (var i = 0; i < n; i++) {
              eVs=parseFloat(calcSpectr.eVarr[i]);
              calcSpectr.fcvArr.push(Boltzman(eVs,Etr,Temp));
          }
      }

      function makeConvolve(){
          var n = parseInt(calcSpectr.numPoints);
          var eVs;
          calcSpectr.plotArr = [];
          for (var i = 0; i < n; i++) {
              eVs = parseFloat(calcSpectr.eVarr[i]);
              calcSpectr.plotArr.push(convolve(eVs));
          }
          //console.log('convolution: ',calcSpectr.plotArr[n-500]);
      }

      function Boltzman(E, Etr, T) {
          var arvo = 0;
          if ((E - Etr) >= 0) {
              arvo = Math.exp(-eCha * (E - Etr) / (kBoltz * T));
          }
          return arvo;
      }

      function convStrt(Ez){
          var strt=parseFloat(calcSpectr.eTr); //jdos=0; if epsilon<etr
          if (calcSpectr.inPlot.Lih && (Ez>=strt)){
              strt=Ez;//+Math.log(0.95)*parseFloat(calcSpectr.eU)/1000;
          }
          if(calcSpectr.inPlot.e && !calcSpectr.inPlot.fcv && !calcSpectr.inPlot.jdos &&
          !calcSpectr.inPlot.Se){//vain energia valittu konvoluutioon:
              strt= (calcSpectr.inPlot.Lih)? Ez: Ez+Math.log(1E-6)*parseFloat(calcSpectr.eU)/1000;
          }
          return strt;
      }

      function convStp(Ez){
          var stp=Ez-Math.log(1E-7)*parseFloat(calcSpectr.eU)/1000;
          if(calcSpectr.inPlot.fcv){
              stp=parseFloat(calcSpectr.eTr)-Math.log(1E-8)*kBoltz*parseFloat(calcSpectr.kelvin)/eCha;
          }
          return stp;
      }

      function convolve(Ey){
          if (calcSpectr.inPlot.convo == false){
              alert('nothing to convolve');
              return;
          }
          var Ex=parseFloat(Ey);
          var Eu=parseFloat(calcSpectr.eU);
          var Ef=parseFloat(calcSpectr.eTr);
          var Eb=parseFloat(calcSpectr.exEb);
          var type=calcSpectr.jdostype;
          var T=parseFloat(calcSpectr.kelvin);
          var convPoints=800;//nonuniform grid size 1,2,3,4...200
          var convF;         //integrand value at gridpoint
          var convInt=0;     //convolution integral
          var convStart=convStrt(Ey); //start point integral variable (integrand zero in bandgap)
          var convStop=convStp(Ey);
          if (convStop<=convStart) return 0;
          var convDelt=(convStop-convStart)/(convPoints-1);
          var convE=convStart; //integral variable (energy axis)
          var Lih; //value of broadening function;
          for (var i=0;i<convPoints+1;i++){//(var i=0;i<convPoints;i++){
              //convE=convE+i*convDelt;
              //convE=convE+convDelt;
              convF=1; //enables the separate plotting of integrand components
              if (calcSpectr.inPlot.e) {
                  convF=convF*convE;
              }
              if (calcSpectr.inPlot.jdos){
                  convF=convF*Jdos(Ef,convE,type);
              }
              if (calcSpectr.inPlot.Se) {
                  convF=convF*Sommerf(convE,Ef,Eb);
              }
              if (calcSpectr.inPlot.fcv){
                  convF=convF*Boltzman(convE,Ef,T);
              }
              Lih=(calcSpectr.inPlot.Lih==true)? Urbach(Eu,-Ex,-convE): symUrbach(Eu,-Ex,-convE);
              if (i==0) {
                  //console.log('n=0 Lih*convF',Lih*convF);
                  convF*=(0.5*Lih*convDelt);
              }else if (i==convPoints){//else if (i==convPoints-1){
                  //convF*=(0.5*Lih*(i)*convDelt);
                  convF*=(0.5*Lih*convDelt);
              }else {
                  //convF*=(Lih*(i+0.5)*convDelt);
                  convF*=(Lih*convDelt);
              }
              convInt+=convF;
              convE=convE+convDelt;
          }
          //convInt*=convDelt;
          return convInt;
      }

      function makeJdos() {
          calcSpectr.jdosArr = [];
          var eVs;
          var num = parseInt(calcSpectr.numPoints);
          var Etr = parseFloat(calcSpectr.eTr);
          var type=calcSpectr.jdostype;
          for (var i = 0; i < num; i++) {
              eVs = parseFloat(calcSpectr.eVarr[i]);
              calcSpectr.jdosArr.push(Jdos(Etr,eVs,type));
          }
      }

      function Jdos(Etr,E,type){
          var arvo=0;
          if (E >= Etr) {
              if (type=='bulk'){
                  arvo = Math.sqrt(E - Etr); //bulk materials
              }else{
                  arvo=1;  //Heaviside step function for quantum wells
              }
          }
          return arvo.toFixed(7);
      }

      function makeLih() {
          var Ef = parseFloat(calcSpectr.eTr);
          var n = parseInt(calcSpectr.numPoints);
          var Eu = parseFloat(calcSpectr.eU);
          var helppi;
          var eVs;
          calcSpectr.Lih=[];
          for (var i = 0; i < n; i++) {
              eVs=parseFloat(calcSpectr.eVarr[i]);
              calcSpectr.Lih.push(Urbach(Eu,Ef,eVs));
          }
      }

      function makeSymLih() {
          var Ef = parseFloat(calcSpectr.eTr);
          var n = parseInt(calcSpectr.numPoints);
          var Eu = parseFloat(calcSpectr.eU);
          var helppi;
          var eVs;
          calcSpectr.SymLih = [];
          for (var i = 0; i < n; i++) {
              eVs = parseFloat(calcSpectr.eVarr[i]);
              calcSpectr.SymLih.push(symUrbach(Eu, Ef, eVs));
          }
      }

      function LinOrLog(){
          var arr=[];
          var max=0;
          for (var i=0;i<calcSpectr.numPoints;i++){
              var tempi=[];
              tempi.push(parseFloat(calcSpectr.eVarr[i]));
              tempi.push(parseFloat(calcSpectr.plotArr[i]));
              arr.push(tempi);
              max=(max<tempi[1])? tempi[1]:max;
          }
          max=Math.ceil(Math.log10(max)); //autoscale log axis max
          var min=max-5;                  //autoscale log axis min
          if (calcSpectr.linlog == 'log') {
              for (var i = 0; i < calcSpectr.numPoints; i++) {
                  arr[i][1] = (arr[i][1]>1E-6)? Math.log10(arr[i][1]):-6;
              }
              plot.getAxes().yaxis.options.min = min; //scale log axis min
              plot.getAxes().yaxis.options.max = max;  //scale log axis max
          }else{
              plot.getAxes().yaxis.options.min = null; //autoscale
              plot.getAxes().yaxis.options.max = null; //autoscale
          }
          return arr;
      }

      function LinOrLogExp() {
        var arr=[];
        for (var i = 1; i < experArr.length; i++) {
          var tempi = [];
          tempi.push(experArr[i][0]);
          tempi.push(experArr[i][1]);
          arr.push(tempi);
        }
        if (calcSpectr.linlog == 'log') {
          for (var i = 0; i < experArr.length-1; i++) {
            arr[i][1] = (arr[i][1] > 1E-6) ? Math.log10(arr[i][1]) : -6;
          }
        }
        return arr;
      }

      function Urbach(Eu, Ef, E) {
          var helppi = 0;
          if ((Ef - E) >= 0) {
              helppi = Math.exp(-(Ef - E) * 1000 / Eu);
          }
          return helppi;
      }

      function symUrbach(Eu, Ef, E) {
          var helppi = Math.exp(-Math.abs(Ef - E) * 1000 / Eu);
          return helppi;
      }

      // Create a div for each axis
      $.each(plot.getAxes(), function (i, axis) {
          if (!axis.show)
              return;
          var box = axis.box;
          $("<div class='axisTarget' style='position:absolute; left:" + box.left + "px; top:"
                  + box.top +"px; width:" + box.width + "px; height:" + box.height + "px'></div>")
                  .data("axis.direction", axis.direction)
                  .data("axis.n", axis.n)
                  .css({backgroundColor: "#f00", opacity: 0, cursor: "pointer"})
                  .appendTo(plot.getPlaceholder())
                  .hover(
                          function () {//handler for hover in:
                              $(this).css({opacity: 0.10});
                              //-$("#clicked").text("You hovered 0.1 " + axis.direction + axis.n + "axis!");
                              if (axis.direction=='y') {
                                  showTooltip(box.left+box.width, box.top+box.height/2, 'Click to toggle lin/log');
                              }else{
                                  showTooltip(box.left+box.width/2, box.top-box.height, 'Click to edit range');
                              }
                          },
                          function () {//handler for hover out:
                              $(this).css({opacity: 0});
                              //-$("#clicked").text("You hovered 0 " + axis.direction + axis.n + "axis!");
                              $("#tooltip").remove();
                          }
                  )
                  .click(function () {
                      if  (axis.direction=='y'){
                        calcSpectr.linlog = (calcSpectr.linlog == 'lin') ? 'log' : 'lin';
                          inhombr();
                      }else{
                        $("#spRange").css('display','block');
                        //-$("#spWhat").css('display','block');
                        $( "#settnDial" ).dialog( "open" );
                      }
                      //$("#clicked").text("You clicked the " + axis.direction + axis.n + "axis!");
                  });
      });

      inhombr();

      $("#ph1_inhomog").mouseleave(function() {
          $("#tooltip").remove();
      });

      $("#ph1_inhomog").bind("plothover", function (event, pos, item) {
          //$("#clicked").text("You hovered at: " + pos.x + ','+ pos.y+'event.target: '+event.target);
          showTooltip(40, 30, 'DblClick to edit graph');
          //-alert("You clicked at " + pos.x + ", " + pos.y);
          // axis coordinates for other axes, if present, are in pos.x2, pos.x3, ...
          // if you need global screen coordinates, they are pos.pageX, pos.pageY
          if (item) {
              var point='E: '+(pos.x).toFixed(4)+' val: '+ (pos.y).toFixed(4);
              showTooltip(40, 30, point);
              //highlight(item.series, item.datapoint);
              //$("#clicked").text("You hovered at: " + item.series + ',' +item.datapoint);
              //alert("You clicked a point!");
          }
      });

      function showTooltip(x, y, contents) {
          //console.log('showing tooltip: ',x,' ',y, ' ',contents);
          if ($("#tooltip").length > 0) {
              $("#tooltip").remove();
          }
          $('<div id="tooltip">' + contents + '</div>').css({
              position: 'absolute', display: 'none', top: y + 5, left: x + 5,
              border: '1px solid #fdd', padding: '2px', 'background-color': '#fee', opacity: 0.80
          }).appendTo("#ph1_inhomog").fadeIn(200);
      }

      function setChkboxes(){
          $('#pltEpsilon').prop('checked', calcSpectr.inPlot.e);
          $('#pltJdos').prop('checked', calcSpectr.inPlot.jdos);
          $('#pltSommerf').prop('checked', calcSpectr.inPlot.Se);
          $('#pltFcv').prop('checked', calcSpectr.inPlot.fcv);
          $('#pltUrbach').prop('checked', calcSpectr.inPlot.Lih);
          $('#pltsUrbach').prop('checked', calcSpectr.inPlot.Lsih);
      }

      function setLegend(){
          calcSpectr.legend = '';
          var dotti = '\u00B7'; //multiplication dot
          var regexi = /^\u00B7+/;
          if (calcSpectr.inPlot.e) calcSpectr.legend = 'E';
          if (calcSpectr.inPlot.jdos) calcSpectr.legend += dotti + 'Jdos';
          if (calcSpectr.inPlot.Se) calcSpectr.legend += dotti + 'Se';
          if (calcSpectr.inPlot.fcv) calcSpectr.legend += dotti + 'Fcv';
          if ((calcSpectr.inPlot.Lih || calcSpectr.inPlot.Lsih) &&
             !calcSpectr.inPlot.convo) calcSpectr.legend='Lih';
          calcSpectr.legend.trim();
          //remove leading multiplication dot(s):
          calcSpectr.legend = calcSpectr.legend.replace(regexi,'');
          if (calcSpectr.inPlot.convo){
              calcSpectr.legend = '(' + calcSpectr.legend + ')*Lih';
          }
          //console.log('calcSpectr.legend: '+calcSpectr.legend);
          calcPlotted();
      }

      function multPlotted(arra){
          //console.log('multPlotted arra: ', JSON.stringify(arra));
          num=calcSpectr.numPoints;
          if (calcSpectr.plotArr.length<1){
              for (var i=0;i<num;i++) {
                  calcSpectr.plotArr.push(arra[i]);
              }
          }else{
              for (var i=0;i<num;i++) {
                  calcSpectr.plotArr[i]*=arra[i];
              }
          }
      }

      function calcPlotted(){
          calcSpectr.plotArr=[];
          if (calcSpectr.inPlot.e){
              multPlotted(calcSpectr.eVarr);
          }
          if (calcSpectr.inPlot.jdos) {
              //console.log('multPlotted jdos: ',JSON.stringify(calcSpectr.jdosArr));
              multPlotted(calcSpectr.jdosArr);
          }
          if (calcSpectr.inPlot.Se) {
              //console.log('multPlotted exenArr: ',JSON.stringify(calcSpectr.exenArr));
              multPlotted(calcSpectr.exenArr);
          }
          if (calcSpectr.inPlot.fcv) {
              //console.log('multPlotted fcvArr: ',JSON.stringify(calcSpectr.fcvArr));
              multPlotted(calcSpectr.fcvArr);
          }
          if (calcSpectr.inPlot.Lih && !calcSpectr.inPlot.convo) {
              //console.log('Plotted Lih: ',JSON.stringify(calcSpectr.Lih));
              calcSpectr.plotArr=[];
              multPlotted(calcSpectr.Lih);
          }
          if (calcSpectr.inPlot.Lsih && !calcSpectr.inPlot.convo) {
              //console.log('Plotted Lih: ',JSON.stringify(calcSpectr.Lih));
              calcSpectr.plotArr=[];
              multPlotted(calcSpectr.SymLih);
          }
          if (calcSpectr.inPlot.convo) {
              calcSpectr.plotArr = [];
              makeConvolve();
          }
          normalizeConvo();
          inhombr();
      }

      function normalizeConvo(){
          if ((calcSpectr.inPlot.Lsih||calcSpectr.inPlot.Lih) && calcSpectr.inPlot.e && calcSpectr.inPlot.Se
          && calcSpectr.inPlot.fcv) {
              var n=calcSpectr.numPoints;
              var max=0;
              var i;
              for (i=0;i<n;i++){
                  max=(calcSpectr.plotArr[i]>max)? max=calcSpectr.plotArr[i]:max;
              }
              for (i = 0; i < n; i++) {
                  calcSpectr.plotArr[i]=calcSpectr.plotArr[i]/max;
              }
          }
      }

      $("#pltUrbach, #pltsUrbach").click(function(){
          if ($(this).attr('id') == 'pltUrbach' && $(this).prop('checked')==true) {
              $('#pltsUrbach').prop('checked', false);
              calcSpectr.inPlot.Lsih=false;
              calcSpectr.inPlot.Lih=true;
          }
          if ($(this).attr('id') == 'pltsUrbach' && $(this).prop('checked')==true) {
              $('#pltUrbach').prop('checked', false);
              calcSpectr.inPlot.Lih=false;
              calcSpectr.inPlot.Lsih=true;
          }
          setLegend();
      });

      //response checkbox change events:
      $("#pltEpsilon, #pltJdos, #pltSommerf, #pltFcv, #pltUrbach, #pltsUrbach").change(function () {
          /*if ($(this).attr('id')=='pltUrbach' || $(this).attr('id'=='pltsUrbach')){
             $(this).prop('checked',!$(this).prop('checked'));
          }
          if ($(this).attr('id')=='pltUrbach' && $(this).prop('checked',true)){
              $('#pltsUrbach').prop('checked',false);
          }
          if ($(this).attr('id') == 'pltsUrbach' && $(this).prop('checked', true)) {
              $('#pltUrbach').prop('checked', false);
          }*/
          calcSpectr.inPlot.e = ($('#pltEpsilon').prop('checked'))? true : false;
          calcSpectr.inPlot.jdos = ($('#pltJdos').prop('checked'))? true : false;
          calcSpectr.inPlot.Se = ($('#pltSommerf').prop('checked')) ? true : false;
          calcSpectr.inPlot.fcv = ($('#pltFcv').prop('checked')) ? true : false;
          calcSpectr.inPlot.Lih = ($('#pltUrbach').prop('checked')) ? true : false;
          calcSpectr.inPlot.Lsih = ($('#pltsUrbach').prop('checked')) ? true : false;
          calcSpectr.inPlot.convo = false;
          if ((calcSpectr.inPlot.e || calcSpectr.inPlot.jdos || calcSpectr.inPlot.Se || calcSpectr.inPlot.fcv)
              && (calcSpectr.inPlot.Lih==true || calcSpectr.inPlot.Lsih==true)) {
              calcSpectr.inPlot.convo = true;
          }
          //makeJdos();       //density of states
          setLegend();
      });

      $("#rangeok, #evetok, #jdosok, #exenhaok, #urbachok, #whatok").click(function(){
          switch ($(this).attr('id')){
              case 'rangeok':
                  calcSpectr.eVstart=parseFloat($("#eVStart").spinner("value")).toFixed(3);
                  calcSpectr.eVstop=parseFloat($("#eVStop").spinner("value")).toFixed(3);
                  $("#eVStart").spinner("option", "value", calcSpectr.eVstart);
                  $("#eVStop").spinner("option", "value", calcSpectr.eVstop);
                  makespArr();       //recreate spectral array
                  makeJdos();
                  makeBoltz();       //recreate Boltzmann distribution
                  makeSommer();
                  makeLih();         //recreate Urbach distribution
                  makeSymLih();
                  calcPlotted();
                  break;
              case 'evetok':
                  makeBoltz();
                  calcPlotted();
                  break;
              case 'jdosok':
                  break;
              case 'exenhaok':
                  makeSommer();
                  calcPlotted();
                  break;
              case 'urbachok':
                  makeLih();
                  calcPlotted();
                  break;
              case 'whatok':
                  break;
          }
          var parentti = $(this).parent();
          parentti.css('display', 'none');
          var onkojoku=0;
          $('fieldset','#settnDial').each(function(){
              var a=$(this).attr('style');
              onkojoku += (a.search('block')>-1)? 1:0;
              //fsetit.push([$(this).attr('id'),a]);
          });
          //if all fieldsets are closed close also dialogform:
          $('#settnDial').dialog('close');
          if (onkojoku>0) {
              $('#settnDial').dialog('open');
              setJdosRadio();
              setQwRadio();
          }
      });
      $('#hrefEpsilon').click(function(){
        $("#spRange").css('display','block');
        $("#settnDial").dialog("close");
        $("#settnDial").dialog("open");
        setJdosRadio();
      });
      $('#hrefJdos').click(function () {
        $("#spJdos").css('display','block');
        $("#settnDial").dialog("close");
        $("#settnDial").dialog("open");
        setJdosRadio();
      });
      $('#hrefSommerf').click(function(){
        $("#exEnha").css('display','block');
        $("#settnDial").dialog("close");
        $("#settnDial").dialog("open");
        setJdosRadio();
        setQwRadio();
      });
      $('#hrefExcito').click(function () {
        $("#eg_et").css('display','block');
        $("#settnDial").dialog("close");
        $("#settnDial").dialog("open");
        setJdosRadio();
        setQwRadio();
      });
      $('#hrefUrbach, #hrefsUrbach').click(function () {
        $("#spUrbach").css('display','block');
        $("#settnDial").dialog("close");
        $("#settnDial").dialog("open");
        setJdosRadio();
      });
      // Add the Flot version string to the footer

      //Tabs-6, 7 & 8 Handler for input-file, for reading local files:
      $("#emisLocFiles").on("change", function () {
          var selected_file = '';
          selected_file = $('#emisLocFiles').get(0).files[0];
          if (!selected_file) return;
          ReadLocFle(selected_file, gotEmisFile);
      });

      $("#footer").prepend("Flot graph" + $.plot.version + " &ndash; ");
