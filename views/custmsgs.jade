extends layout

block content
  h3(align='center')= title
  br
  table
    //-sarake jossa message tree:
    col(style="width:50%")
    //-sarake jossa tekstikentät:
    col(style="width:50%")
    tr
      //-Ekan rivin eka sarake:
      td(valign='top')
        //div
        fieldset
          //-if user
            b(id='userN') #{user.username}
            |  : n submitted messages
            br
            button(id='btnSaveMsg', class='medium-btn', type='button') Submit new message
            br
          //-else
            | Please login to leave a message!
            br
          h4(id='userN')
          b(id="msgHd") Message tree:
          div(id="msgTree")
      td(valign='top')
        div
          form(id='frm-msgTree', role='form')
            fieldset
              //-if user
                |  Pick a thread, type a header and your message to the text areas below
                br
              //-legend(id='msgTreLege') Rock Phys messages:
              label(for="msgThread") Thread:
              button(id='btnSaveMsg', style='margin-left:12em' class='medium-btn', type='button') Submit new message
              br
              input(type="text" id="msgThread" length="150" style='margin:5px' size="60")
              br
              label(for="msgHeader") Header:
              br
              input(type="text" id="msgHeader" length="150" style='margin:5px' size="60")
              br
              label(for="msgText" id="msgLbl") Message:
              br
              textarea(id="msgText" cols="60" rows="10")
                //-input(type="text" id="msgDesc" length="150" style='margin:5px' size="60")
              br

  script(type='text/javascript').
    //-t��lt�p� skripti pelaa sujuvasti my�s custmsg formin kanssa
    //-mutta sisennyksen on oltava oikeassa kohdassa, muuten skripti ei käynnisty
    //-scripti on viimeisenä ei tarvita document ready funktiota
    var msgUser;
    /*= $('#userN').text();
    msgUser = (msgUser.substring(0, msgUser.indexOf(' :')).length > 0) ?
      msgUser.substring(0, msgUser.indexOf(' :')) : msgUser;
    msgUser= (msgUser.length>0)? msgUser : 'No login';
    //-console.log('msgUser: ',msgUser);*/
    msgUser =window.sessionStorage.getItem('RTFuser');
    console.log('msgUser: ',msgUser);
    if (msgUser ){
      countMessages(msgUser);
      //$('#userN').text(msgUser+', you have submitted: '+n+' messages');
      $('#btnSaveMsg').attr("disabled", false);
    }else{
      $('#userN').text('Please login to submit a message');
      $('#btnSaveMsg').attr("disabled", true);
    }

    $('#userN').text(msgUser);
    var mesTree = $('#msgTree').jstree({
      'core': {
        "check_callback": true
      }
    });
    //init. data for message tree
    var bTreeData = [
      {
        "text": "Root nod", "children": [
        {"text": "Child node 1"},
        {"text": "Child node 2"}
      ]
      }
    ];
    $('#msgTree').jstree(true).settings.core.data = bTreeData;
    $('#msgTree').jstree(true).refresh();
    msgTreeUpdate();

    //console.log('jstree done');
    $('#btnSaveMsg').click(function () {
      var msgName=fleNmr();
      console.log('msgName: ',msgName);
      if (!msgName) return;
      var msgTxt=$('#msgText').val();
      //console.log('message: ',msgTxt);
      var tokene;
      if (msgUser.length>0) {
        tokene = window.sessionStorage.getItem('RTFtoken');
      }
      //console.log('token: ',tokene);
      var msgSave = $.post('/auth/messageSave', {
        userNme: msgUser,
        Collection: 'messages',
        rtftoken: tokene,
        fName:msgName,
        Text: msgTxt
      }).done(function (data, status, xhr) {//
        if (data) {
          //console.log('after saving data: ',data);
          if (data.token == 'invalid') {//invalid token otherwise data.token==undefined
            window.sessionStorage.setItem('RTFuser', 'No login');
            window.sessionStorage.setItem('RTFtoken', null);
              //console.log(data);
            $.notifyBar({//alert reason for token failure is in data
              //position: "bottom",
              cssClass: "error",
              html: data.response
            });
            return;
          }
          //console.log('data received: ',data);
          if (data.statCode == 200) {
            //console.log('saving response: ',data);
            $.notifyBar({
              cssClass: "success",
              html: "Thank's for your message!"
            });
          } else {
            $.notifyBar({
              cssClass: "error",
              html: data.error
            });
          }
        } else {
          console.log('no data saved');
          $.notifyBar({
            //position: "bottom",
            cssClass: "error",
            html: data.error
          });
        }
      })
      /*.fail(function () {
        console.log('failed to save message');
        $.notifyBar({
        //position: "bottom",
         cssClass: "warning",
         html: "(Connection or database error in server)"
        });
      })*/
      .error(function(XMLHttpRequest, textStatus, errorThrown){
        //console.log('XMLHttpRequest: ',XMLHttpRequest);
        //console.log('textStatus: ',textStatus);
        //console.log('errorThrown: ',errorThrown);
        if (XMLHttpRequest.status==409){
          $.notifyBar({
            //position: "bottom",
            cssClass: "warning",
            html: "You have already posted a message with identical Thread & Header combination"
          });
        }else{
          $.notifyBar({
            //position: "bottom",
            cssClass: "warning",
            html: "Connection or server database eror: ",errorThrown
          });
        }
      });
      msgTreeUpdate();
    });


    /**
    * Function builds and checks the message filename before it is posted to server
    * @return string mngFileN
    */
    function fleNmr() {
      var fNamed;
      var fileN = $('#msgHeader').val();
      /*if (fileN.length < 1) {// means the filename field is empty
        alert("Header is required");
        return fNamed;//undefined
      }*/
      fileN = fileN.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      var myRegxp1 = /^[-_\/\sa-z0-9]+$/i;
      /*if (!myRegxp1.test(fileN)) {//only alphanumerics with "-", "_" and "/" are allowed
        alert("Invalid header: " + fileN);
        return fNamed;//undefined
      }*/
      var dirN = $('#msgThread').val();
      dirN = dirN.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      /*if (!myRegxp1.test(dirN)) {//only alphanumerics with "-", "_" and "/" are allowed
        alert("Invalid thread: " + dirN);
        return fNamed;//undefined
      }*/

      if ($('#msgText').val().length<1) {//no message has been typed
        alert("No message content!");
        return fNamed;//undefined
      }
      var overLap = fileN.indexOf(dirN); //is thread already included in the beginning of messagename?
      //console.log('thread overlap: ',overLap);
      fNamed = (overLap == 0) ? fileN : dirN + '/' + fileN;
      fNamed = fNamed.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      console.log('messageName: ',fNamed);
      return fNamed;
    }

    function msgTreeUpdate() {
      $('#msgThread').prop('disabled', false); //these should be enabled
      $('#msgHeader').prop('disabled', false);
      $('#msgText').prop('disabled', false);
      //var collec = pickCollection();
      //fetches all user's file titles with their paths from server:
      var checkAllUserMsgs = $.post('/auth/getMessages', {
        //-directly uses messages collection in mongodb:
        })
        .done(function (data, status, xhr) {//
          if (data) {
            //console.log('data received: ',data);
            if (data.statCode == 200) {
              bTreeData = JSON.parse(data.resString);
              //console.log('bTreeData: ',bTreeData);
              $('#msgTree').jstree(true).settings.core.data = bTreeData;
              $('#msgTree').jstree(true).refresh();
            } else {
              $.notifyBar({
              cssClass: "error",
              html: data.error
              });
            }
          } else {
            //console.log('no data received');
            $.notifyBar({
            //-position: "bottom",
            cssClass: "error",
            html: "could not obtain user messages from server"
            });
          }
        })
        .fail(function () {
          console.log('failed to read user messages ');
          $.notifyBar({
          //-position: "bottom",
          cssClass: "warning",
          html: "(Connection or database error)"
          });
        })
      /*.error(function(XMLHttpRequest, textStatus, errorThrown){
       console.log('status:' + XMLHttpRequest.status + ', status text: ' + XMLHttpRequest.statusText);
       })*/
        ;
    }

    $('#msgTree').on("change.jstree deselect_all.jstree select_node.jstree",
      function (e, data) {
      //console.log("jstree-changed: "+Object.keys(data));
      //console.log("jstree-changed e: ",e);
      //console.log("jstree-changed data: ",data);
      //responds: action,node,selected,event,instance copy_node.jstree move_node.jstree
      switch (e.type) {
        case 'deselect_all':
          //deselect all is triggered before new selected cell is activated
          $('#msgThread').prop("disabled", true);
          $('#msgHeader').prop("disabled", true);
          $('#msgTxt').prop("disabled", true);
          $('#msgThread').val('');
          $('#msgHeader').val('');
          $('#msgTxt').val('');
          break;
        case 'select_node':
          selctdNde = data.instance.get_selected(true)[0];
          $('#msgThread').prop("disabled", true);
          $('#msgHeader').prop("disabled", false);
          $('#msgHeader').val(selctdNde.text);
          var longName=selctdNde.text;
          var n=0;
          var findIt=selctdNde.parent;
          var doIf=(findIt!="#");
          while (doIf) {//build long filename for selected node
            n+=1;
            if (n>20) break; //avoid infinete loop
            var parnt='';
            parnt = bTreeData.filter(function (e) {//find parent:
              return e.id == findIt;
            });
            //console.log('filtered parnt[0].id: ',parnt[0].id);
            findIt=parnt[0].parent; //to search in previous dir tree level
            if (findIt.length>0) longName=parnt[0].text+'/'+longName;
            doIf=(parnt[0].parent.length>0 && parnt[0].parent!='#');
          }
          $('#msgHeader').val(selctdNde.text);
          $('#msgThread').val(longName.substring(0,longName.lastIndexOf('/')));

          //read message for the selected node:
          var msgRead = $.post('/auth/getOneMessage', {
            messageId: selctdNde.id
          })
            .done(function (data, status, xhr) {//
              if (data) {
                //console.log('received data: ', data.resString);
                //show message in the text area:
                var thisMessa=JSON.parse(data.resString);
                $('#msgText').val(thisMessa.uMessage);
                //show message sender and date on the lbl:
                var lblText=thisMessa.username+' wrote on '+thisMessa.dateRec;
                $('#msgLbl').text(lblText);
              } else {
                console.log('message text was not received');
                $.notifyBar({
                  //position: "bottom",
                  cssClass: "error",
                  html: data.error
                });
              }
            })
            .error(function (XMLHttpRequest, textStatus, errorThrown) {
              //console.log('XMLHttpRequest: ',XMLHttpRequest);
              console.log('message read textStatus: ',textStatus);
              console.log('message read errorThrown: ',errorThrown);
              $.notifyBar({
                //position: "bottom",
                cssClass: "error",
                html: errorThrown
              });
            });


          break;
      }
    }); //btree on.change ready

    /**
     * Function builds the filename and parentfolder for a jstree-node
     * @nodeJson string jstree node id
     * @return object {Folder: foldername, shortFile:'filename', longFile:'filename with path'}
     */
    function msgItem(nodeJson) {
      //js-tree data, in bTree is used to build a folder structure for the selected node
      var obje = {longFile: '', shortFile: '', Folder: ''};
      //longfile: filename with directory, shortFile: only filename, Folder: directory only
      if (!bTreeData || nodeJson.length < 1) {//return early if no data
        return obje;
      }
      var pathi = '';
      var condition = true;
      var nodeId = nodeJson;
      var temp = "";
      //seuraavasta saadaan selville valittu node.id:
      while (condition) {//grep (i.e. filters array) to find node object for nodeId:
        var noode = $.grep(bTreeData, function (e) {
          return e.id == nodeId;
        })[0];
        //Examine if this is root parent:
        condition = (noode.parent != "#" && nodeId != 'ajason1'); //false if root parent
        temp = noode.text;
        temp = temp.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
        pathi = temp + "/" + pathi;
        nodeId = noode.parent;
      }
      pathi = pathi.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      var slashN = pathi.lastIndexOf('/');

      obje.longFile = temp;
      temp = pathi.slice(0, slashN + 1);
      obje.Folder = temp.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      obje.shortFile = pathi.slice(slashN + 1);
      obje.longFile = obje.Folder + '/' + obje.shortFile;

      /*if (fileTyp == 'jstree-file') {
        temp = pathi.slice(0, slashN + 1);
        obje.Folder = temp.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
        obje.shortFile = pathi.slice(slashN + 1);
        obje.longFile = obje.Folder + '/' + obje.shortFile;
      }
      else {
        obje.Folder = pathi;
        obje.longFile = '';
        obje.shortFile = '';
      }*/
      return obje;
    }

    function countMessages(userN){
      var msgCount = $.post('/auth/countMessages', {
        username: userN
      })
      .done(function (data, status, xhr) {//
        if (data) {
          console.log('received data: ', data);
          //show message in the text area:
          var MessaCount = data.MessageCount;
          $('#userN').text('You have posted: '+MessaCount+' messages');
          //show message sender and date on the lbl:
          //var lblText = thisMessa.username + ' wrote on ' + thisMessa.dateRec;
          //$('#msgLbl').text(lblText);
        } else {
          console.log('message count was not obtained from server');
          $.notifyBar({
            //position: "bottom",
            cssClass: "error",
            html: data.error
          });
        }
      })
      .error(function (XMLHttpRequest, textStatus, errorThrown) {
        //console.log('XMLHttpRequest: ',XMLHttpRequest);
        console.log('message count textStatus: ', textStatus);
        console.log('message count errorThrown: ', errorThrown);
        $.notifyBar({
          //position: "bottom",
          cssClass: "error",
          html: errorThrown
        });
      });
    }
