extends layout.pug

block append scripts
  script(src='/bower_components/jquery/dist/jquery.min.js')
  script(src='/bower_components/jquery-ui/jquery-ui.js')
  script(src='/bower_components/jstree/dist/jstree.js')
  script(src='/bower_components/jqnotifybar/jquery.notifyBar.js')
  link(rel='stylesheet', href='/bower_components/jstree/dist/themes/default/style.min.css')
  link(rel='stylesheet', href='/bower_components/jquery-ui/themes/start/jquery-ui.min.css')
  link(rel='stylesheet', href='/bower_components/jqnotifybar/css/jquery.notifyBar.css')

block content
  h3(align='center')= title
  br
  table
    //-sarake jossa message tree:
    col(style="width:55%")
    //-sarake jossa tekstikentät:
    col(style="width:45%")
    tr
      //-Ekan rivin eka sarake:
      td(valign='top')
        //div
        fieldset
          //-if user
            b(id='userN') #{user.username}
            |  : n submitted messages
            br
            button(id='btnSaveMsg', class='medium-btn', type='button') Submit new message
            br
          //-else
            | Please login to leave a message!
            br
          if user
            h4(id='userN') user.username
          label(for="allMess") All:
          input(type="radio" id="allMess" name="messSel" value="all" style="margin-right:7px")
          label(for="modMess") Moderated:
          input(type="radio" id="modMess" name="messSel" value="moderated" style="margin-right:7px")
          label(for="modMess") In moderation:
          input(type="radio" id="unmodMess" name="messSel" value="unmoderated" style="margin-right:7px")
          br
          b(id="msgHd") Message tree:
          div(id="msgTree")
      td(valign='top')
        div
          form(id='frm-msgTree', role='form')
            fieldset
              //-if user
                |  Pick a thread, type a header and your message to the text areas below
                br
              //-legend(id='msgTreLege') Rock Phys messages:
              label(for="msgThread") Thread:
              button(id='btnSaveMsg', style='margin-left:12em' class='medium-btn', type='button') Create message
              br
              input(type="text" id="msgThread" length="150" style='margin:5px' size="60")
              br
              label(for="msgHeader" id='lblHeader') Header:
              //-label(for="msgHeader" id='lblHeader' style='display:none') Header:
              br
              //-input(type="text" id="msgHeader" length="150" style='margin:5px; display:none' size="60")
              input(type="text" id="msgHeader" length="150" style='margin:5px;' size="60")
              br
              label(for="msgText" id="msgLbl") Message:
              br
              textarea(id="msgText" cols="60" rows="10")
                //-input(type="text" id="msgDesc" length="150" style='margin:5px' size="60")
              br
        button(id='btnConfirm', style='margin-left:12em; display:none;' class='medium-btn', type='button') Confirm delete

  script(type='text/javascript').
    //-**** Obtain the controls on this page by jquery into object variables ****
    var msgTree=$('#msgTree');                                                //*
    var msgHeader=$('#msgHeader');                                            //*
    var msgThread=$('#msgThread');                                            //*
    var btnSaveMsg=$('#btnSaveMsg');                                          //*
    var btnConfirm=$('#btnConfirm');                                          //*
    var msgText=$("#msgText");                                                //*
    var msgLbl=$('#msgLbl');                                                  //*
    var userN=$('#userN');                                                    //*
    $("#allMess").prop("checked", true);                                      //*
    //-**************************************************************************

    var selMess='all'; //start by viewing all messages
    var msgUser=window.sessionStorage.getItem('RTFuser');
    var disa=(msgUser && msgUser=='Publ')? false:true;
    msgThread.prop('disabled', disa); //thread remains always disabled for all users except Publ

    if (msgUser && msgUser!='No login'){
      countMessages(msgUser); //counts messages and updates userN label
      btnSaveMsg.attr("disabled", false);
    }else{//no login:
      btnSaveMsg.attr("disabled", true);
      userN.text(msgUser); //=No login
    }

    var bTreeData=[];
    //read and updates msg tree with all moderated messages:
    msgTreeUpdate();
    initTree();

    /** Event handler for <btnSaveMsg>
     * used to enable message creation and
     * to save the created message
    */
    btnSaveMsg.click(function () {
      //-caption can beeither: 'Create message' or 'Save message':
      if (msgUser.length < 1 || msgUser == 'No login') {
        //should never leak here, while this button is disabled for 'No login'
        $.notifyBar({//alert failure
          cssClass: "error",
          html: 'Please login for messaging '
        });
        return;
      }
      //select operation: 'Create message' or 'Save message':
      var butCapt=btnSaveMsg.text();
      //var butCapt=$(this).text();
      if (butCapt=='Create message'){
        msgText.val('');
        btnSaveMsg.text('Submit message');
        msgLbl.text('New message:');
        msgThread.val(msgHeader.val());
        msgHeader.val('');
        msgHeader.attr('disabled',false)
        return;
      }
      //-came here, button caption =='Submit message'
      saveMessage();
      //-counts messages in server, and saves if less than four in moderation
    });

    /**
    * Function builds and checks the message filename before message posting to server
    * @return string mngFileN
    */
    function fleNmr() {
      var fNamed;
      var fileN = msgHeader.val();
      fileN = fileN.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      var myRegxp1 = /^[\sa-zA-Z0-9\?\!\-\_]+$/i;//only alphanumerics with "-","_","!","?"  are allowed
      var myRegxp2 = /^[\sa-zA-Z0-9\?\!\-\_\/]+$/i;//only alphanumerics with "-", "_", "!", "?" and "/"  are allowed
      if (msgUser!='Publ' && !myRegxp1.test(fileN)) {
        alert("Invalid header in: " + fileN);
        return fNamed;//undefined
      }
      var viestiPuu = msgTree.jstree(true); //get this jstree-instance
      var selctdNde = viestiPuu.get_selected(true)[0];//('get_selected')
      var dirN=makeLongName(selctdNde);
      dirN = dirN.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      if (!myRegxp2.test(dirN)) {
        alert("Invalid thread: " + dirN);
        return fNamed;//undefined
      }
      if (msgUser!='Publ' && msgText.val().length<1) {//no message has been typed
        alert("No message content!");
        return fNamed;//undefined
      }
      var overLap = fileN.indexOf(dirN); //is thread already included in the beginning of messagename?
      fNamed = (overLap == 0) ? fileN : dirN + '/' + fileN;
      fNamed = fNamed.replace(/(^\/)|(\/$)/g, ""); // remove leading and trailing '/'
      return fNamed;
    }

    /**
     * Event handler initialization for radio button input selecting
     * either: 'all', 'moderated' or 'unmoderated' messages
     */
    $('input[name=messSel]').change(function () {
      selMess = $('input[name=messSel]:checked').val();
      msgTree.jstree("deselect_all");
      msgTreeUpdate();
      initTree();
    });

    function isModerated(value) {
      return value.data.Moderated == true;
    }

    function unModerated(value) {
      return value.data.Moderated == false;
    }

    function included(arr, obj) {
      for (var i = 0; i < arr.length; i++) {
        if (arr[i] == obj.id) {
          return true;
        }
      }
      return false;
    }

    /**  @makeTreeData
     * filters message data and builds message tree for three viewing modes,
     * either: 'all', 'moderated' or 'unmoderated' messages
     * @allNodes is all the message data
     * @messMod is the viewing mode
     */
    function makeTreeData(allNodes,messMod){
      if (messMod=='all'){
        return allNodes; //no need to process
      } else if (messMod=='moderated'){
        //Results in error, if message parent is missing (message has unmoderated parent)
        return allNodes.filter(isModerated); //array of moderated messages
      } else {
        //unmoderated messages have no children; parents need to included
        var theTree = allNodes.filter(unModerated); //array of unmoderated messages
        console.log("theTree: ",theTree);
        var allPrnts = []; //
        for (var k = 0; k < theTree.length; k++) {//step through all unmoderated
          var n=0;
          allPrnts.push(theTree[k].parent);
          var nextId=theTree[k].parent;
          while (nextId && nextId != "#" && n < 50) {//include if not root node, avoid infinite loop
            var nextParentNode = $.grep(
              allNodes, function (e) {//finds the node for current nextId
                return e.id == nextId;
              });
            nextId=nextParentNode[0].parent; //sets new value for parent id
            allPrnts.push(nextId);
            n+=1; //adds counter for avoiding infinite loop
          }
        }
        for (var k=0;k<allNodes.length;k++){
          //each parent must be included only once
          var include=included(allPrnts,allNodes[k]);
          if (include){
            theTree.push(allNodes[k]);
          }
        }
        return theTree;
      }
    }

    function msgTreeUpdate() {
      msgHeader.prop('disabled', false);
      msgText.prop('disabled', false);
      //-fetches all message titles on the server:
      bTreeData=[];
      msgTree.jstree("destroy"); //ilman tätä tulee multippeli tree ja virheilmoitus
      var checkAllMsgs = $.post('/auth/getMessages', {
        moderated: 'all'
        }) //haetaan kaikki viestit
        .done(function (data, status, xhr) {//
          if (data) {
            //console.log('data received: ',data);
            if (data.statCode == 200) {
              var tempTreeData = JSON.parse(data.resString);//tästä tulee object array
              bTreeData = makeTreeData(tempTreeData,selMess);
              msgTree.jstree({
                "core": {
                  "multiple" : false,
                  "animation" : 500,
                  "data": bTreeData,
                  "check_callback": true
                  },
                "plugins": ["contextmenu", "unique"],
                "contextmenu":  {"items": function (node) {
                  var menIts = $.jstree.defaults.contextmenu.items();
                  menIts.create._disabled = true; // (node.icon=="jstree-file")? true: false;
                  delete menIts.create; //remove create from default menu items
                  delete menIts.ccp;    //remove cut copy paste from mdefault menu items
                  menIts.moderate=
                      { "separator_before":false,
                        "separator_after" :false,
                        "label"           :"Moderation",
                        "action"          :function (obj) {
                          //console.log('obj: ',obj);
                            messModeration();
                        }
                      };
                  return menIts;
                  }, "select_node": true
                  }
                });
            } else {
              console.log('data.statcode not 200');
              $.notifyBar({
              cssClass: "error",
              html: data.error
              });
            }
          } else {
            console.log('no data received');
            $.notifyBar({
            //-position: "bottom",
            cssClass: "error",
            html: "could not obtain user messages from server"
            });
          }
        })
        .fail(function () {
          console.log('failed to read user messages ');
          $.notifyBar({
          //-position: "bottom",
          cssClass: "warning",
          html: "(Connection or database error)"
          });
        });
    }

    /* @messModeration() responses to item 'Moderation' in jstree context menu
    *  changes btnConfirm text and makes the button visible
    */
    function messModeration(){
      var viestiPuu = msgTree.jstree(true); //get this jstree-instance
      var selctdNde = viestiPuu.get_selected(true)[0];
      if (selctdNde.data.Moderated){
        btnConfirm.text('Unmoderate');
      }else{
        btnConfirm.text('Moderate');
      }
      btnConfirm.css('display', 'inline');
    }

    /* initTree() is a wrapper function for message tree event handler initialization
    * enabling event handler recovery after .jstree('destroy') command, required and
    * used  after changing views between: 'all', 'moderated' and 'unmoderated'
    */
    function initTree(){
      msgTree.on("change.jstree deselect_all.jstree select_node.jstree rename_node.jstree delete_node.jstree",
                function (e, data) {
        switch (e.type) {
          case 'deselect_all':
            //deselect all is triggered before new selected cell is activated
            msgThread.val('');
            msgHeader.val('');
            msgText.val('');
            btnConfirm.css('display','none');
            break;
          case 'select_node':
            msgHeader.attr("disabled", true);
            btnConfirm.css('display','none');
            btnConfirm.css('display','none');
            btnSaveMsg.text('Create message');
            btnSaveMsg.css('display','inline');
            var selctdNde = data.instance.get_selected(true)[0];
            msgHeader.val(selctdNde.text);
            var thrdNod = $.grep(
              data.instance.settings.core.data, function (e) {//finds the node for current nextId
                return e.id == selctdNde.parents[0];
              });
            var thrTxt= (thrdNod.length>0)? thrdNod[0].text: '#';
            msgThread.val(thrTxt);

            //-*** Read one message from db****************************************
            var msgRead = $.post('/auth/getOneMessage', {                        //*
              messageId: selctdNde.id                                            //*
            })
            .done(function (data, status, xhr) {
              //message text was obtained ok:
              if (data) {
                 //show message in the text area:
                var thisMessa=JSON.parse(data.resString);
                msgText.val(thisMessa.uMessage);
                //show message sender and date on the lbl:
                var lblText=thisMessa.username+' wrote on '+thisMessa.dateRec;
                msgLbl.text(lblText);
              } else {
                //console.log('message text was not received');
                $.notifyBar({
                  //position: "bottom",
                  cssClass: "error",
                  html: data.error
                });
              }
            })
            .error(function (XMLHttpRequest, textStatus, errorThrown) {
              //message text was not obtained:
              $.notifyBar({
                //position: "bottom",
                cssClass: "error",
                html: errorThrown
              });
            });
            break;
          case 'rename_node':
            btnSaveMsg.css('display','none');
            btnConfirm.css('display','inline');
            btnConfirm.text('Confirm rename');
            break;
          case 'delete_node':
            btnSaveMsg.css('display', 'none');
            btnConfirm.css('display', 'inline');
            btnConfirm.text('Confirm delete');
            var nimenLoppu=data.node.text;
            var kokoNimi=makeLongName(data.node);
            var cutti=kokoNimi.lastIndexOf('/');
            var nimenAlku= (cutti<1)? "#": kokoNimi.slice(0,cutti);
            msgThread.val(nimenAlku);
            msgHeader.val(nimenLoppu);
            msgThread.attr("disabled", true);
            msgHeader.attr("disabled", true);
            break;
          default:
            //console.log('default case:');
            btnConfirm.css('display','none');
            break;
        }
      }); //btree on.change ready
    }

    function makeLongName(selNod){
      var longName = selNod.text;
      var n = 0;
      var findIt = selNod.parent;
      var doIf = (findIt != "#"); //already root item
      while (doIf) {//build long filename for selected node
        n += 1;
        if (n > 20) break; //avoid infinite loop
        var parnt = '';
        parnt = bTreeData.filter(function (e) {//find parent:
          return e.id == findIt;
        });
        //console.log('filtered parnt[0].id: ',parnt[0].id);
        findIt = parnt[0].parent; //to search in previous dir tree level
        if (findIt.length > 0) longName = parnt[0].text + '/' + longName;
        doIf = (parnt[0].parent.length > 0 && parnt[0].parent != '#');
      }
      return longName;
    }

    function saveMessage(){
      var msgName = fleNmr(); //-builds name for a new message
      //console.log('msgName in saving: ',msgName);
      if (!msgName) return;
      var msgTxt = msgText.val();
      var mesLen = msgTxt.length;
      if (mesLen <1) return;
      if (mesLen > 500) {//max length of message
        $.notifyBar({//alert reason for token failure is in data
          cssClass: "error",
          html: 'Your message is too long'
        });
        return;
      }
      var tokene = window.sessionStorage.getItem('RTFtoken');
      var msgSave = $.post('/auth/messageSave', {
        userNme: msgUser,
        Collection: 'messages',
        rtftoken: tokene,
        fName: msgName,
        Text: msgTxt
      }).done(function (data, status, xhr) {//
        if (data) {
          if (data.token == 'invalid') {
            //-token check returns invalid, otherwise data.token==undefined,
            //-(OK saving does not return token in data)
            window.sessionStorage.setItem('RTFuser', 'No login');
            window.sessionStorage.setItem('RTFtoken', null);
            $.notifyBar({//-alert reason for token failure is in data
              cssClass: "error",
              html: data.response
            });
            return;
          }
          if (data.statCode == 200) {//-success in saving
            $.notifyBar({
              cssClass: "success",
              html: "Thank's for your message!"
            });
            btnSaveMsg.text('Create message');
            msgHeader.val('');
            msgText.val('');
            countMessages(msgUser);
          } else {
            $.notifyBar({
              cssClass: "error",
              html: data.error
            });
          }
        } else {
          $.notifyBar({
            cssClass: "error",
            html: data.error
          });
        }
      })
      .error(function (XMLHttpRequest, textStatus, errorThrown) {
        //-console.log('XMLHttpRequest: ',XMLHttpRequest);
        //-console.log('textStatus: ',textStatus);
        //-console.log('errorThrown: ',errorThrown);
        if (XMLHttpRequest.status == 409) {
          //console.log('409 responseText: ',XMLHttpRequest.responseText);
          var virhe=JSON.parse(XMLHttpRequest.responseText);
          $.notifyBar({
            cssClass: "warning",
            html: virhe.resString
          });
        } else {
          $.notifyBar({
            //position: "bottom",
            cssClass: "warning",
            html: "Connection or server database eror: "+ errorThrown
            //html: errorThrown
          });
        }
      });
    }

    function adminNupdate(data){
      //show message in the text area:
      var MessaCount = JSON.parse(data.MessageCount);
      var viesti = 'We have: ' + (MessaCount.all - MessaCount.inModeration) + ' moderated messages';
      if (MessaCount.inModeration > 0) {
        viesti = viesti + ' and ' + MessaCount.inModeration + ' in moderation';
      }
      userN.text(viesti);
    }

    function countMessages(userN){
      var msgCount = $.post('/auth/countMessages', {
        username: userN
      })
      .done(function (data, status, xhr) {//
        if (data) {
          //console.log('received data: ', data);
          adminNupdate(data);
        } else {
          //console.log('message count could not be obtained from server');
          var MessaCount ={'all':false,'inModeration':data.error};
          $.notifyBar({
            cssClass: "error",
            html: data.error
          });
        }
      })
      .error(function (XMLHttpRequest, textStatus, errorThrown) {
        //console.log('XMLHttpRequest: ',XMLHttpRequest);
        //console.log('message count textStatus: ', textStatus);
        //console.log('message count errorThrown: ', errorThrown);
        $.notifyBar({
          cssClass: "error",
          html: errorThrown
        });
      });
    }

    btnConfirm.click(function(){
      var thisButton=$(this);
      var titlex=thisButton.text();
      thisButton.css('display', 'none');
      switch (titlex) {
        case 'Confirm rename':
          //console.log('message rename');
          var viestiPuu = msgTree.jstree(true); //get this jstree-instance
          var selctdNde = viestiPuu.get_selected(true)[0];//('get_selected')
          var newFile = makeLongName(selctdNde);
          var oldFile = selctdNde.original.text;
          oldFile = oldFile.replace(/(^\/)|(\/$)/g, ""); //remove leading and trailing '/'
          var indexi=newFile.lastIndexOf("/");
          if (indexi>0){
            oldFile=newFile.slice(0,indexi)+'/'+oldFile; //adds the directory part
          }
          var ikoni = selctdNde.original.icon;
          msgRename(oldFile, newFile, ikoni);
          break;
        case 'Confirm delete':
          var fileN = (msgThread.val() == "#") ? msgHeader.val() :
          msgThread.val()+'/'+msgHeader.val();
          //console.log('fileN: ',fileN);
          messageDelete(fileN);
          break;
        case 'Moderate':
          btnConfirm.css('display','none');
          var viestiPuu = msgTree.jstree(true); //get this jstree-instance
          var selctdNde = viestiPuu.get_selected(true)[0];//('get_selected')
          toggleModeration(selctdNde);
          break;
        case 'Unmoderate':
          btnConfirm.css('display','none');
          var viestiPuu = msgTree.jstree(true); //get this jstree-instance
          var selctdNde = viestiPuu.get_selected(true)[0];//('get_selected')
          var childNods=selctdNde.children.length;
          var modChidr=false;
          for (var i=0;i<childNods;i++){//check if node has moderated children:
            var childNode = $.grep(
              bTreeData, function (e) {//finds the node for current nextId
                return e.id == selctdNde.children[i];
              });
            //console.log('childNode: ',childNode);
            if (childNode[0].data.Moderated==true) modChidr=true;
          }

          if (modChidr==false) {
            toggleModeration(selctdNde);
          } else {
            alert('Cannot unmoderate thread: First unmoderate or delete contained messages!');
          }
          break;
        default:
          btnConfirm.css('display','none');
          break;
      }
    });

    function toggleModeration(selNod){
      var selctdId = selNod.id;
      var toggleTo = !selNod.data.Moderated;
      var toggleMod = $.post('/auth/toggleModeration', {
        userNme: msgUser,
        //userNme required for authentication, messages for all users will be used
        MessageId:selctdId,
        Moderated:toggleTo
      })
        .done(function (datas) {
          if (datas) {//responds "Moderation toggled", otherwise error message
            console.log('Moderation response: ' + datas);
            if (datas.resString && datas.resString.indexOf("Moderation toggled") > -1) {
              $.notifyBar({
                cssClass: "success",
                html: datas.resString // "Message moderation was toggled:"
                });
              msgTreeUpdate();
            } else {
              //database responds with error message
              $.notifyBar({
                cssClass: "warning",
                html: "Moderation not toggled; login expired?"
              });
            }
          }

        })
        .fail(function () {
          $.notifyBar({
            cssClass: "warning",
            html: "Moderation/Unmoderation failed! Admin login timed out?"
          });
        })
    }

    /**
     * Function rename selected message in server
     * @oldFile string Document old name to rename
     * @newFile string Document new name
     * @icon    string Document icon 'jstree-file' or 'jstree-folder'
     * @function
     */
    function msgRename(oldFile, newFile, icon) {
      //console.log('rename oldfile: ' + oldFile + ' newFile: ' + newFile);
      btnConfirm.css('display', 'none'); //return original caption
      if (msgUser == 'No login') {//timo check necessary
        alert('admin login expired');
        return;
      }

      var datColl = 'messages';
      var tokene = window.sessionStorage.getItem('RTFtoken');

      var renameDoc = $.post('/auth/dbRename', {
        userNme: msgUser,
        //userNme required for authentication, messages for all users will be used
        Collection: datColl, //messages
        oldName: oldFile,
        rtftoken: tokene,
        newName: newFile,
        fileType: icon
        //fileType is either 'jstree-file' or 'jstree-folder'
      })
              .done(function (datas) {
                //successful renaming responds "renaming OK" otherwise an error message
                if (datas) {
                  console.log('Renaming response: ' + datas);
                  if (datas.resString && datas.resString.indexOf("renaming OK") > -1) {
                    $.notifyBar({
                      cssClass: "success",
                      html: datas.resString // "Your file was renamed:"
                    });
                  }
                  else {
                    //database responds with error message
                    $.notifyBar({
                      cssClass: "warning",
                      html: "File was not renamed; login expired?"
                    });
                  }
                }
              })
              .fail(function () {
                $.notifyBar({
                  cssClass: "warning",
                  html: "Rename failed! Admin login timed out?"
                });
              });
    }

    /**
     * Function deletes selected message from mongodatabase on server
     * @fileN string Filename to delete
     * @function
     **/
    function messageDelete(flNme) {
      var datColl = 'messages';
      console.log('delete flNme: ',flNme);
      var tokene= window.sessionStorage.getItem('RTFtoken');
      var deleteDoc = $.post('/auth/dbDelete', {
        userNme: msgUser,
        rtftoken: tokene,
        Collection: datColl,
        fileName: flNme
      })
        .done(function (datas) {
          //successful deleting responds "deleting OK" otherwise an error message
          if (datas && datas.statCode == 200) {
            if (datas.resString.indexOf('deleting OK') > -1) {
              msgThread.val('');
              msgHeader.val('');
              msgText.val('');
              $.notifyBar({
                cssClass: "success",
                html: "You deleted:" + datas.resString.slice(17)
              });
            }else {
              //database responds with error message
              $.notifyBar({
                cssClass: "warning",
                html: "Message not deleted, database error: " + datas.error
              });
            }
          }
        })
        .fail(function (datas) {
          handleFail(datas, 'Nothing was deleted');
        });
    }