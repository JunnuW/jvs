extends layout

block content
  form(id='signupForm' method='POST' role="form" action='/signup')
    //- POST-method in this form is prevented by: 'event.preventDefault();' on a
    //- javascript line below. POST-method is replaced by '$(document).submit(function()'
    //- This is necessary to have a validation on the input values,
    //- before the form is submitted and also to have a callback function
    //- after the POST-method for obtaining and sessionStorage saving of the user token,
    //- on the browser side. This callback is not possible with the original POST-method
    legend Signup
    .form-group
      input(type='text', id='firstname', name='firstname', style='display:none', value='Mikki')
      input(type='text', id='lastname', name='lastname', style='display:none', value='Hiiri')
      label(for='username') Username
      input.form-control(type='text', id='username', name='username', autofocus)
    .form-group
      label(for='email') Email (won't be published or advertised)
      input.form-control(name='email', id='email', type='email')
    .form-group
      label(for='password') Password
      input.form-control(id='password', type='password', name='password')
    .form-group
      label(for='confirm') Confirm Password
      input.form-control(id='confirm', type='password', name='confirm')
    button.btn.btn-primary(type='button' id='subClick' style='visibility:visible') Sign up
    button.btn.btn-primary(type='submit' id='submForm' style='visibility:hidden') Signup

  script(type='text/javascript').
    var locat = window.location.href; //gets the present browsing position
    var n = locat.lastIndexOf('/signup');
    locat = locat.slice(0, n); // Browsing position to index
    //console.log('locat ',locat);
    $('#subClick').click(function(){
      $('#firstname').prop('value','M.');//roboteille hunajapurkki 1
      $('#lastname').prop('value','H.'); //roboteille hunajapurkki 2
      sForm = $("#signupForm");
      sForm.validate({
        rules: {
          username: {required: true, minlength: 2},
          email: {required: true, email: true},
          password: {required: true},
          confirm: {equalTo: "#password"}
        },
        messages: {
          username: "required, please give at least two characters",
          email: "required, please give a valid email address, (needed in case you lose your password)",
          password: "required (will be hashed and is recoverable only through your email address)",
          confirm: "required, retype your password exactly"
        }
      });
      if (sForm.valid()) {
        console.log('form Ok');
        $('#submForm').trigger('click');
      }else {
        //console.log('form invalid');
      }
    });
    $(document).submit(function (event) {
        var postData = $('#signupForm').serializeArray();
        var formURL = $('#signupForm').attr("action");
        // Assign handlers immediately after making the request,
        // and remember the jqxhr object for this request
        var jqxhr = $.post(formURL, postData, function(data, textStatus, jqXHR){
          if (data.token != null) {//signup was successful:
            //signup complete and logged in with new credentials
            var accessToken = data.token;
            window.sessionStorage.setItem('RTFuser', data.user.username);
            window.sessionStorage.setItem('RTFtoken', accessToken);
            locat = locat + '/'; //continues to index page
            window.location.replace(locat); //no possibility to use back in browsing
          }else{//signup was unsuccessful
            var respStr=data.responseStr;
            if (respStr.indexOf('!!')>-1){//ropotti yritti kirjautumista
              window.location.replace(locat); //to index/ no possibility to use back in browsing
              return;
            }else {//joku muu syy virheeseen, luultavasti ei ropotti
              location = location + '/signup/?info='+respStr;//direct user back to signup page
              window.location.replace(location); //no possibility to use back in browsing
            }
          }
        })
          /*.done(function (data, textStatus, jqXHR) {
            console.log("done second success data: "+JSON.stringify(data));
          })*/
           .fail(function (data, textStatus, jqXHR) {
             console.log("fail error data: "+JSON.stringify(data));
           })
      event.preventDefault(); //default post command is replaced by the code above
    });
