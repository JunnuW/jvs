//-doctype html
//-html(lang="us")
//-  head
//-    meta(charset="utf-8"
div(id="mongoDialForm")
  form(id='frm-DirSel', role='form' )
    fieldset
      b(style='font-size:14px') Select directory:
      br
      //-legend Select directory:
      button(id='btnUserDir', class='medium-btn', type='button') Private
      button(id='btnPublDir', class='medium-btn', type='button') Public
      button(id='btnLocDir', class='medium-btn', type='button') Local
    br
    //-fieldset(id="fsFileDesc" style='display:none')
      label(id='mongFileDescLbl' for="mongFileDesc") Description:
      br
      input(type="text" id="mongFileDesc" length="150" style='margin:5px' size="60")
      br
  br
  form(id='frm-Login', role='form' )
    fieldset
      //-legend Log in to access private directories:
      b(style='font-size:14px') Log in to access private directories:
      br
      label(for='mngUsrnm' class='labelMongo') Username:
      //-input(id='mngUsrnm', type='text', name='username', maxlength='50', style='margin-left:5px', autofocus)
      input(id='mngUsrnm', type='text', name='username', maxlength='50', style='margin-left:5px', autofocus)
      br
      label(for="mngPWD" class='labelMongo') Password:
      input(id='mngPWD', type='password', name='password', maxlength='50', style='margin-left:5px')
      button(id='btnLogInni', class='medium-btn', type='button') Log in
      br
    br
  form(id='frm-FileTree', role='form')
    fieldset
      //-legend(id='FilTreLege') Files on server:
      b(style='font-size:14px' id='FilTreLege') Files on server:
      br
      label(for="directoName") Directory:
      br
      input(type="text" id="directoName" length="150" style='margin:5px' size="60")
      br
      label(for="mongoFileName") Filename:
      br
      input(type="text" id="mongoFileName" length="150" style='margin:5px' size="60")
      br
      b(id="mongoHd") Subdirectories and files:
      div(id="mongoTree")
      br
    fieldset(id="fsFileDesc" style="display:none")
      label(id='mongFileDescLbl' for="mongFileDesc") Description:
      br
      input(type="text" id="mongFileDesc" length="150" style='margin:5px' size="60")
      br

  script(type='text/javascript').
    /**
     * Function read description for a selected document in server mongodatabase
     * @fileName string Document name
     * @collec   string Document collection 'Materials', 'Targets', 'Stacks'
     * @function
     */
    function mongoReadDesc(fileName, callsback) {
      var datColl = pickCollection();
      var tokene;
      if (userName != 'No login') {
        tokene = window.sessionStorage.getItem('RTFtoken');
      }
      //console.log('mongoReadDesc: ',fileName);
      var getDoc = $.post('/auth/dbFindOne', {
        userNme: dirUser,
        fileName: fileName,
        rtftoken: tokene,
        //chooses between materials or targets data files
        Collection: datColl,
        replyType: 'descOnly'
        //fileType is either 'jstree-file' or 'jstree-folder'
      })
        .done(function (datas) {
          //successful reading responds "reading OK" otherwise an error message
          if (datas && datas.statCode == 200) {
            //console.log('Document reading response: '+datas);
            if (datas.resString.indexOf("DocumentOK") == 0) {//gives -1 if not found
                var resText = datas.resString.slice(datas.resString.indexOf(':') + 1);
                //cut out 'documentOK' from the beginning
                resText = (resText.length > 0) ? resText : 'without description';
                callsback(resText);
            } else {
              //database responds with error message
              $.notifyBar({
                cssClass: "warning",
                html: "File not found: " + datas.error
              });
              callsback('');
            }
          }
        })
        .fail(function (datas) {
          handleFail(datas, 'Description not obtained');
          callsback('');
        });
    }

    /**
     * Function validates file description before saving to mongodb
     * text input: mongFileDesc on mongoDialForm holds the  description
     * @function
     */
    /*function FileDescOk(tryThis){
      console.log('FileDescOk: ',tryThis);
      var rege=new RegExp("^[a-zA-Z0-9_-]*$");
      //var rege=new RegExp("\w");
      // var resu = rege.test(tryThis);
      var resu = rege.exec(tryThis);
      console.log('resu: ',resu);
      return resu;
    }*/

    /**
    * Function saves selected data to server mongodatabase
    * @fileN string Filename to save into server database
    * @collN string Collection name to save in database
    * @function
    */
    function mongoSave(saveUrl, flNme) {
      //this either inserts new document to database using: saveUrl= '/auth/dbInsert'
      //or updates an existing document using: saveUrl= '/auth/dbUpdate'
      //first selects a document collection:
      //validate mongFileDesc':
      /*var descOk = FileDescOk($('#mongFileDesc').val());
      if (!descOk) {
        $('#mongFileDesc').css('background-color', '#c00').css('color', '#fff');
      }*/
      var datColl = pickCollection(); //collection will be embedded in request data:
      var tokene;
      if (userName != 'No login') {
        tokene = window.sessionStorage.getItem('RTFtoken');
      }
      var arrSave = [];
      var dialTitle = DFmngo.dialog('option', 'title');
      var dJson = {};
      var sad = $('#mongoFileName').val();
      sad = sad.replace(/(^\/)|(\/$)/g, ""); //remove leading and trailing '/'
      console.log('sad: ', sad);
      sad = sad.trim();
      if (sad.length < 1) {
        //if (flNme == $('#directoName').val()) {
        //save operation is a directory??
        dJson = toJsonArr(datColl, flNme, [], $('#mongFileDesc').val());
      }
       else {
         //console.log('arrSave.length: ' + arrSave.length);
         var descr = $('#mongFileDesc').val();
         switch (dialTitle) {
           case ((dialTitle.match(/material/gi)) ? dialTitle : undefined) :
             //tehdään materiaalitiedostosta JSON:
             dJson = toJsonArr(datColl, flNme, matrlArr, descr);
             //arrSave=matrlArr;
             break;
           case ((dialTitle.match(/target/gi)) ? dialTitle : undefined) :
             //tehdään tarkettispektristä JSON:
             dJson = toJsonArr(datColl, flNme, targArr, descr);
             //arrSave=targArr;
             break;
           case ((dialTitle.match(/emission/gi)) ? dialTitle : undefined) :
             //tehdään tarkettispektristä JSON:
             dJson = toJsonArr(datColl, flNme, inhomSpectr.experArr, descr);
             //arrSave=experArr;
             break;
           case ((dialTitle.match(/stack/gi)) ? dialTitle : undefined) :
             descr = descr.replace(/(^[\"\']+)|([\"\']+$)/g, ""); //remove leading and trailing single and double quotes
             dJson.Filename = flNme;
             dJson.Descr = descr;
             console.log('stack: ', stack);
             dJson.Stack = stack;
             break;
           default:
             console.log('mongoSave error:');
             throw "No datacollection for " + dialTitle;
          }
            //dJson = toJsonArr(datColl, flNme, arrSave, $('#mongFileDesc').val());
            //dJson = toJsonArr(userName,datColl,flNme,[["nm","n","k"],[400,1.5,0.1],[420,1.51,0.05]],$('#mongFileDesc').val());
            //dJson = toJsonArr(userName,datColl,flNme,[["nm","R (or T)","% (or Abs)"],[500,55],[510,54]],[520,55]],$('#mongFileDesc').val());
            //dJson =
       }
       var dbSave = $.post(saveUrl, {
         userNme: dirUser,
         Collection: datColl,
         rtftoken: tokene,
         data: JSON.stringify(dJson)
       })
         .done(function (datas) {
           //successfull saving responds "saving OK" otherwise an error message
           if (datas && datas.statCode == 200) {
             //console.log('saving response: ' + datas);
             if (datas.resString.indexOf("saving OK") > -1 || datas.resString.indexOf('Updated') > -1) {
               $('#btn-mngOpenSave').text("Save file");//return original caption
               switch (dialTitle) {
                 case ((dialTitle.match(/material/gi)) ? dialTitle : undefined) :
                   $('#descMater').val($('#mongFileDesc').val());
                   EnDisButt('Enabled', '#btnUseMat');
                   break;
                 case ((dialTitle.match(/target/gi)) ? dialTitle : undefined) :
                   $('#descTarge').val($('#mongFileDesc').val());
                   EnDisButt('Enabled', '#btnUseTarg');
                   break;
                 case ((dialTitle.match(/stack/gi)) ? dialTitle : undefined) :
                   $('#descStack').val($('#mongFileDesc').val());
                   break;
                 case ((dialTitle.match(/emission/gi)) ? dialTitle : undefined) :
                   $('#descStack').val($('#mongFileDesc').val());
                   break;
                 default:
                   throw "No datacollection for " + dialTitle;
               }
               //matrlArr[0][3]=$('#mongFileDesc').val();
               $.notifyBar({
                 cssClass: "success",
                 html: "Your data was saved to file: " + dJson.Filename
               });
             }else {
               $.notifyBar({
                 cssClass: "warning",
                 html: "File was not saved, database error: " + datas.error
               });
             }
           }
         })
         .fail(function (datas) {
           handleFail(datas, 'Nothing was saved');
         });
         DFmngo.dialog("close");
    }

    /**
     * Function for preparing mongodb saving operations with the chosen data
     * @mngFileN string filename to be used in the data saving
     * @function saveToMngoDb()
     */
    function saveToMngoDb(mngFileN) {
      //check, if the filename already exists:
      var datColl = pickCollection();
      //console.log('checking if file exists: '+mngFileN);
      var saveUserFile = $.post('/auth/checkOneUserF', {
        userNme: dirUser,
        //chooses between materials or targets data files
        Collection: datColl,
        fileName: mngFileN
      })//file checking operation on server; should return either "yes" or "no"
      .done(function (data) {
        //console.log('if exists: '+data);
        if (data && data.statCode == 200) {
          switch (data.resString) {
            case "yes":
              //file exists, needs to prompt for overwrite:
              $('#btn-mngOpenSave').text("Confirm Overwrite");
              //'overwrite File' pompted before data overwrite
              break;
            case "no":
              //file does not exist: it can be saved immediately
              mongoSave('/auth/dbInsert', mngFileN);
              //another way to proceed, use: sendData(dJson) where
              // instead of jquery's ajax.post, XMLHttpRequest method is used
              break;
            default:
              $.notifyBar({
              //position: "bottom",
              cssClass: "error",
              html: "File was not saved! bad response from server!"
              });
              break;
          }
        } else {//no relevant response from server to existence query:
          //console.log('File existence check failed on server');
          var errme = (data) ? data.error
            : "Could not check if already file exists on server!";
            $.notifyBar({
              cssClass: "error",
              html: errme
            //html: "Could not check if file already exists in database!"
            });
            DFmngo.dialog("close");
        }
      })
      .fail(function () {//Failed to get any response from server
        console.log('failed check connections');
        $.notifyBar({
          cssClass: "error",
          html: "(Connection or database error in server)"
        });
        DFmngo.dialog("close");
      });
    }

     /**
     * Function reads a selected document in server mongodatabase
     * @fileName string Document new name
     * @collec   string Document collection 'Materials', 'Targets', 'Stacks'
     * @function
     */
     function mongoGetOne(fileName) {
       var datColl = pickCollection();
       var tokene;
       if (userName != 'No login') {
         tokene = window.sessionStorage.getItem('RTFtoken');
       }
       var getDoc = $.post('/auth/dbFindOne', {
         userNme: dirUser,
         fileName: fileName,
         rtftoken: tokene,
         Collection: datColl,//chooses between materials or targets data files
         replyType: 'wholeDoc'
       })
       .done(function (datas, textStatus) {
         if (textStatus == 'nocontent') {//responsed with status 204 'nocontent
           console.log('no content 204');
           $.notifyBar({
             cssClass: "warning",
             html: "Data could not be obtained from server: "
           });
           return;
         }
         if (textStatus == 'success' && datas) {
           switch (datas.statCode) {
             case 200:
               if (datas.resString.indexOf("DocumentOK") > -1) {
                 //cut out 'documentOK' text from the response string beginning
                 //and convert back to object
                 var resObj = JSON.parse(datas.resString.slice(datas.resString.indexOf('{')));
                 //console.log('resObj: ',resObj);
                 if (datColl == 'emissions') {
                   var dialoogi = $('#settnDial').dialog('option', 'title');
                   if (dialoogi == 'Inhomogeneous spectrum') {
                     $('#inhFileDesc').html(resObj.description);
                     inhomSpectr.fileN=fileName;
                     inhomSpectr.experPlot = makeEmisArr(resObj);
                     inhomSpectr.experArr = makeEmisArr(resObj);
                     //add experimental file description:
                     $('#inhDescLbl').css('display','inline');
                     $('#inhDesc').css('display','inline');
                     var descr=resObj.description;
                     descr=descr.replace(/"/g,"");
                     $('#inhDesc').html(descr);
                     inhombr();
                   } else if (dialoogi == 'Homogeneous spectrum') {
                     homSpectr.fileN=fileName;
                     homSpectr.experArr = makeEmisArr(resObj);
                     homSpectr.experPlot = makeEmisArr(resObj);
                     //add experimental file description:
                     $('#homDescLbl').css('display', 'inline');
                     $('#homDesc').css('display', 'inline');
                     var descr=resObj.description;
                     descr=descr.replace(/"/g,"");
                     $('#homDesc').html(descr);
                     hombr();
                   }
                   break;
                 }
                 //todo: update filename and description inputs
                 respToArr(fileName, resObj);     //updates matrlArr to opened document
               }
               break;
             case 202:
               //database responds with not found
               //console.log('202:Data could not be obtained:  '+datas.error)
               $.notifyBar({
                 cssClass: "warning",
                 html: "Data could not be obtained: " + datas.error
               });
               break;
           }
         }
         //console.log('reading done: ',datas,' ',textStatus);
         //successful reading responds "reading OK" otherwise an error message
       })
       .fail(function (datas) {
         console.log('data reading failed: ', datas);
         handleFail(datas, 'Data was not obtainable');
       });
       DFmngo.dialog("close");
     }

     /**
     * Function rename selected document in server mongodatabase
     * @oldFile string Document old name to rename
     * @newFile string Document new name
     * @icon    string Document icon 'jstree-file' or 'jstree-folder'
     * @function
     */
     function mongoRename(oldFile, newFile, icon) {
       console.log('rename oldfile: ' + oldFile + ' newFile: ' + newFile);
       var datColl = pickCollection();
       var tokene;
       if (userName != 'No login') {
         tokene = window.sessionStorage.getItem('RTFtoken');
       }
       var renameDoc = $.post('/auth/dbRename', {
         userNme: dirUser,
         //if public files have been selected: dirUser=='Publ'
         //otherwise dirUser==userName
         Collection: datColl, //chooses between 'materials-' or 'targets data' files
         oldName: oldFile,
         rtftoken: tokene,
         newName: newFile,
         fileType: icon
         //fileType is either 'jstree-file' or 'jstree-folder'
       })
       .done(function (datas) {
         //successful renaming responds "renaming OK" otherwise an error message
         if (datas) {
           console.log('Renaming response: ' + datas);
           if (datas.resString.indexOf("renaming OK") > -1) {
             $('#btn-mngOpenSave').text("Save data");//return original caption
             $.notifyBar({
               cssClass: "success",
               html: datas.resString // "Your file was renamed:"
             });
           }
         else {
           //database responds with error message
           $.notifyBar({
             cssClass: "warning",
             html: "File was not renamed, database error: " + datas.error
           });
         }
         }
       })
       .fail(function (datas) {
         handleFail(datas, 'Renaming failed');
       });
       DFmngo.dialog("close"); // '/auth/dbRename'
     }

     /**
     * Function deletes selected document from server mongodatabase
     * @fileN string Filename to delete
     * @collN string Collection name of the to be deleted
     * @function
     */
     function mongoDelete(flNme) {
       var datColl = pickCollection();
       var tokene;
       if (userName != 'No login') {
         tokene = window.sessionStorage.getItem('RTFtoken');
       }
       var deleteDoc = $.post('/auth/dbDelete', {
         userNme: dirUser,
         rtftoken: tokene,
         //chooses between materials or targets data files
         Collection: datColl,
         fileName: flNme
       })
       .done(function (datas) {
         //successful deleting responds "deleting OK" otherwise an error message
         if (datas && datas.statCode == 200) {
           console.log('Deleting response: ' + datas.resString);
           if (datas.resString.indexOf('deleting OK') > -1) {
             $('#btn-mngOpenSave').text("Save data");//return original caption
             $.notifyBar({
               cssClass: "success",
               html: "You deleted:" + datas.resString.slice(17)
             });
           }
         else {
           //database responds with error message
           $.notifyBar({
             cssClass: "warning",
             html: "File was not deleted, database error: " + datas.error
           });
         }
         }
       })
       .fail(function (datas) {
         handleFail(datas, 'Nothing was deleted');
       });
       DFmngo.dialog("close");
     }

     /**
     * Function picks the correct collection name from mongo database
     *
     * @function pickCollection
     * @return string Collection name to be used in server database
     */
     function pickCollection() {
       var dialTitle = DFmngo.dialog('option', 'title');
       var mngoColle;
       switch (dialTitle) {
         case ((dialTitle.match(/material/gi)) ? dialTitle : undefined) :
           mngoColle = "materials";
           break;
         case ((dialTitle.match(/target/gi)) ? dialTitle : undefined) :
           mngoColle = "targets";
           break;
         case ((dialTitle.match(/stack/gi)) ? dialTitle : undefined) :
           mngoColle = "stacks";
           break;
         case ((dialTitle.match(/emission/gi)) ? dialTitle : undefined) :
           mngoColle = "emissions";
           break;
         default:
           throw "No datacollection for " + dialTitle;
        }
        return mngoColle;
     }


     /**
     * Function updates directory tree on dialog form
     * @function treeUpdate
     * no return data, (updates tree direcly)
     */
     function treeUpdate() {
       $('#directoName').prop('disabled', false); //these should be enabled
       $('#mongoFileName').prop('disabled', false);
       $('#mongFileDesc').prop('disabled', false);
       var collec = pickCollection();
       //console.log('collec: '+collec);
       var tokene;
       if (userName != 'No login') {
         tokene = window.sessionStorage.getItem('RTFtoken');
       }
       //console.log('dirUser: ',dirUser);
       //console.log('treeupdate tokene: ',tokene);
       //fetches all user's file titles with their paths from server:
       var checkUserFiles = $.post('/auth/checkAllUserF', {
         userNme: dirUser,
         rtftoken: tokene,
         //uses either materials, targets or stacks data collection:
         Collection: collec
       })
       .done(function (data, status, xhr) {//
         if (data) {
           //console.log('data.token: '+data.token);
           if (data.token == 'invalid') {//invalid token, Otherwice data.token==undefined
             userName = 'No login';
             window.sessionStorage.setItem('RTFuser', userName);
             window.sessionStorage.setItem('RTFtoken', null);
             //console.log(data);
             $.notifyBar({//alert reason for token failure is in data
             //position: "bottom",
               cssClass: "error",
               html: data.response
             });
             $('#frm-Login').show();
             $('#frm-FileTree').hide();
             $('#btn-mngOpenSave').hide();
             $('#btnLogMeOff').hide();
             //setEdiLbl("Public file:")
             return;
           }
           //console.log('data received: ',data);
           if (data.statCode == 200) {
             aTreeData = JSON.parse(data.resString);
             $('#mongoTree').jstree(true).settings.core.data = aTreeData;
             $('#mongoTree').jstree(true).refresh();
             var dialTitle = $("#mongoDialForm").dialog("option", "title");
             if (dialTitle.indexOf('Open') > -1) {
               //vain open file tapauksessa vilautetaan notifybar:
               $('#btn-mngOpenSave').text('Open File');
                 $("#fsFileDesc").css('display','none');
                 $.notifyBar({
                   cssClass: "success",
                   html: "select from filetree"
               });
             }else {
               //siispä save operaatio
               //console.log('treeUpdate: ',$('#settnDial').dialog('option', 'title'));
               $("#fsFileDesc").css('display','inline');
               var homInhom=$('#settnDial').dialog('option', 'title');
               var teksti='';
               if (homInhom=='Inhomogeneous spectrum'){
                 teksti=$('#inhDesc').text();
               }else{
                 teksti=$('#homDesc').text();
               }
               $("#mongFileDesc").val(teksti);
             }

           } else {
             $.notifyBar({
               cssClass: "error",
               html: data.error
             });
           }
         } else {
           console.log('no data received');
           $.notifyBar({
           //position: "bottom",
             cssClass: "error",
             html: "Error in username and/or password, try again or hit Cancel"
           });
         }
       })
       .fail(function () {
         console.log('failed to read user collection for ' + pickCollection());
         $.notifyBar({
         //position: "bottom",
           cssClass: "warning",
           html: "(Connection or database error in server)"
         });
       })
       /*.error(function(XMLHttpRequest, textStatus, errorThrown){
       console.log('status:' + XMLHttpRequest.status + ', status text: ' + XMLHttpRequest.statusText);
       })*/
       ;
     }